// AUTOGENERATED By makeswamp.py - DO NOT EDIT.

package org.fenfire.swamp;
import java.util.Iterator;
import org.nongnu.navidoc.util.Obs;

/** A non-modifiable RDF graph. The iterators may implement the method
 *  remove, but it should not be used, as it may cause unspecified behavior.
 */
public interface QuadsConstGraph {
    /** Get a ConstGraph whose queries will return the same
     * value as the queries for this graph, but will 
     * set up the Obs for those queries.
     * When the result of any of those queries changes,
     * Obs is called immediately.
     */
    QuadsConstGraph getObservedConstGraph(org.nongnu.navidoc.util.Obs o);

    /** This observed graph will not be used any more, and
     * if desired, may be recycled.
     * This operation is allowed to be a no-op, and
     * if the graph this method is called on is not one that
     * has been returned by getObservedConstGraph, is
     * defined to be so..
     */
    void close();

    /** If this graph is observed (returned from getObservedConstGraph),
     * get the observer.
     */
    Obs getObserver();
    /** If this graph is observed (returned from getObservedConstGraph),
     * get the original.
     */
    QuadsConstGraph getOriginalConstGraph();

    boolean contains(Object e0, Object e1, Object e2, Object e3);
    boolean contains(Object e0, Object e1, Object e2, Object e3, Obs o);

    Object find1_111X(Object e0,Object e1,Object e2);
    Object find1_11X1(Object e0,Object e1,Object e3);
    Object find1_1X11(Object e0,Object e2,Object e3);
    Object find1_X111(Object e1,Object e2,Object e3);
    Object find1_11XA(Object e0,Object e1);
    Object find1_1X1A(Object e0,Object e2);
    Object find1_X11A(Object e1,Object e2);
    Object find1_11AX(Object e0,Object e1);
    Object find1_1XAA(Object e0);
    Object find1_1XA1(Object e0,Object e3);
    Object find1_XAAA();
    Object find1_XAA1(Object e3);
    Object find1_X1AA(Object e1);
    Object find1_X1A1(Object e1,Object e3);
    Iterator findN_111X_Iter(Object e0,Object e1,Object e2);
    Iterator findN_11X1_Iter(Object e0,Object e1,Object e3);
    Iterator findN_1X11_Iter(Object e0,Object e2,Object e3);
    Iterator findN_X111_Iter(Object e1,Object e2,Object e3);
    Iterator findN_11XA_Iter(Object e0,Object e1);
    Iterator findN_1X1A_Iter(Object e0,Object e2);
    Iterator findN_X11A_Iter(Object e1,Object e2);
    Iterator findN_11AX_Iter(Object e0,Object e1);
    Iterator findN_1XAA_Iter(Object e0);
    Iterator findN_1XA1_Iter(Object e0,Object e3);
    Iterator findN_XAAA_Iter();
    Iterator findN_XAA1_Iter(Object e3);
    Iterator findN_X1AA_Iter(Object e1);
    Iterator findN_X1A1_Iter(Object e1,Object e3);
    
    Object find1_111X(Object e0,Object e1,Object e2,Obs obs);
    Object find1_11X1(Object e0,Object e1,Object e3,Obs obs);
    Object find1_1X11(Object e0,Object e2,Object e3,Obs obs);
    Object find1_X111(Object e1,Object e2,Object e3,Obs obs);
    Object find1_11XA(Object e0,Object e1,Obs obs);
    Object find1_1X1A(Object e0,Object e2,Obs obs);
    Object find1_X11A(Object e1,Object e2,Obs obs);
    Object find1_11AX(Object e0,Object e1,Obs obs);
    Object find1_1XAA(Object e0,Obs obs);
    Object find1_1XA1(Object e0,Object e3,Obs obs);
    Object find1_XAAA(Obs obs);
    Object find1_XAA1(Object e3,Obs obs);
    Object find1_X1AA(Object e1,Obs obs);
    Object find1_X1A1(Object e1,Object e3,Obs obs);
    Iterator findN_111X_Iter(Object e0,Object e1,Object e2,Obs obs);
    Iterator findN_11X1_Iter(Object e0,Object e1,Object e3,Obs obs);
    Iterator findN_1X11_Iter(Object e0,Object e2,Object e3,Obs obs);
    Iterator findN_X111_Iter(Object e1,Object e2,Object e3,Obs obs);
    Iterator findN_11XA_Iter(Object e0,Object e1,Obs obs);
    Iterator findN_1X1A_Iter(Object e0,Object e2,Obs obs);
    Iterator findN_X11A_Iter(Object e1,Object e2,Obs obs);
    Iterator findN_11AX_Iter(Object e0,Object e1,Obs obs);
    Iterator findN_1XAA_Iter(Object e0,Obs obs);
    Iterator findN_1XA1_Iter(Object e0,Object e3,Obs obs);
    Iterator findN_XAAA_Iter(Obs obs);
    Iterator findN_XAA1_Iter(Object e3,Obs obs);
    Iterator findN_X1AA_Iter(Object e1,Obs obs);
    Iterator findN_X1A1_Iter(Object e1,Object e3,Obs obs);
    

}

