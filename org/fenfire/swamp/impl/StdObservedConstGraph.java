// AUTOGENERATED By makeswamp.py - DO NOT EDIT.

package org.fenfire.swamp.impl;
import org.nongnu.navidoc.util.Obs;
import org.fenfire.swamp.*;
import java.util.Iterator;

public class StdObservedConstGraph implements ConstGraph {
    ConstGraph constgraph;
    Obs obs;

    public StdObservedConstGraph(ConstGraph graph, Obs obs) {
	this.constgraph = graph;
	this.obs = obs;
    }

    public ConstGraph getObservedConstGraph(Obs obs) {
	throw new Error("DoubleObs");
    }

    public void close() { }

    public Obs getObserver() {
	return obs;
    }

    public ConstGraph getOriginalConstGraph() {
	return constgraph;
    }

    public boolean contains(Object e0, Object e1, Object e2) {
	return constgraph.contains(e0, e1, e2, obs);
    }
    public boolean contains(Object e0, Object e1, Object e2, Obs o) {
	throw new Error("DoubleObs");
    }

    public Object find1_11X(Object e0,Object e1) {
	 return  constgraph.find1_11X(e0,e1,obs);
}
public Object find1_1X1(Object e0,Object e2) {
	 return  constgraph.find1_1X1(e0,e2,obs);
}
public Object find1_X11(Object e1,Object e2) {
	 return  constgraph.find1_X11(e1,e2,obs);
}
public Object find1_1XA(Object e0) {
	 return  constgraph.find1_1XA(e0,obs);
}
public Object find1_XAA() {
	 return  constgraph.find1_XAA(obs);
}
public Object find1_X1A(Object e1) {
	 return  constgraph.find1_X1A(e1,obs);
}
public Iterator findN_11X_Iter(Object e0,Object e1) {
	 return  constgraph.findN_11X_Iter(e0,e1,obs);
}
public Iterator findN_1X1_Iter(Object e0,Object e2) {
	 return  constgraph.findN_1X1_Iter(e0,e2,obs);
}
public Iterator findN_X11_Iter(Object e1,Object e2) {
	 return  constgraph.findN_X11_Iter(e1,e2,obs);
}
public Iterator findN_1XA_Iter(Object e0) {
	 return  constgraph.findN_1XA_Iter(e0,obs);
}
public Iterator findN_XAA_Iter() {
	 return  constgraph.findN_XAA_Iter(obs);
}
public Iterator findN_X1A_Iter(Object e1) {
	 return  constgraph.findN_X1A_Iter(e1,obs);
}

    public Object find1_11X(Object e0,Object e1,Obs obs) {
	throw new Error("DoubleObs");
    }
public Object find1_1X1(Object e0,Object e2,Obs obs) {
	throw new Error("DoubleObs");
    }
public Object find1_X11(Object e1,Object e2,Obs obs) {
	throw new Error("DoubleObs");
    }
public Object find1_1XA(Object e0,Obs obs) {
	throw new Error("DoubleObs");
    }
public Object find1_XAA(Obs obs) {
	throw new Error("DoubleObs");
    }
public Object find1_X1A(Object e1,Obs obs) {
	throw new Error("DoubleObs");
    }
public Iterator findN_11X_Iter(Object e0,Object e1,Obs obs) {
	throw new Error("DoubleObs");
    }
public Iterator findN_1X1_Iter(Object e0,Object e2,Obs obs) {
	throw new Error("DoubleObs");
    }
public Iterator findN_X11_Iter(Object e1,Object e2,Obs obs) {
	throw new Error("DoubleObs");
    }
public Iterator findN_1XA_Iter(Object e0,Obs obs) {
	throw new Error("DoubleObs");
    }
public Iterator findN_XAA_Iter(Obs obs) {
	throw new Error("DoubleObs");
    }
public Iterator findN_X1A_Iter(Object e1,Obs obs) {
	throw new Error("DoubleObs");
    }



}

