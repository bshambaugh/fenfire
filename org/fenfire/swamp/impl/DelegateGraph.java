// AUTOGENERATED By makeswamp.py - DO NOT EDIT.

package org.fenfire.swamp.impl;
import org.nongnu.navidoc.util.Obs;
import org.fenfire.swamp.*;
import java.util.Iterator;

public abstract class DelegateGraph extends AbstractGraph {
    Graph graph;

    public DelegateGraph(Graph graph) {
	this.graph = graph;
    }
    
    public synchronized void close() { graph.close(); }
    public synchronized Obs getObserver() { return graph.getObserver(); }
    public synchronized ConstGraph getOriginalConstGraph() {
        return graph.getOriginalConstGraph();    }
    public synchronized ConstGraph getObservedConstGraph(Obs o) {
        return graph.getObservedConstGraph(o);    }
    public synchronized boolean contains(Object e0, Object e1, Object e2) {
        return graph.contains(e0,e1,e2); }
    public synchronized boolean contains(Object e0, Object e1, Object e2, Obs o) {
        return graph.contains(e0,e1,e2, o); }
    public synchronized Graph getObservedGraph(org.nongnu.navidoc.util.Obs o) {
        return graph.getObservedGraph(o); }
    public synchronized void set1_11X(Object subject, Object predicate, Object object) {
        graph.set1_11X(subject, predicate, object);   }
    public synchronized void add(Object subject, Object predicate, Object object) {
        graph.add(subject, predicate, object);     }
    public synchronized void addAll(Graph g) {
        graph.addAll(g);     }
    public synchronized void rm_111(Object subject, Object predicate, Object object) {
        graph.rm_111(subject, predicate, object);     }


    public Object find1_11X(Object e0,Object e1) {
    return graph.find1_11X(e0,e1); }

public Object find1_1X1(Object e0,Object e2) {
    return graph.find1_1X1(e0,e2); }

public Object find1_X11(Object e1,Object e2) {
    return graph.find1_X11(e1,e2); }

public Object find1_1XA(Object e0) {
    return graph.find1_1XA(e0); }

public Object find1_XAA() {
    return graph.find1_XAA(); }

public Object find1_X1A(Object e1) {
    return graph.find1_X1A(e1); }

public Iterator findN_11X_Iter(Object e0,Object e1) {
    return graph.findN_11X_Iter(e0,e1); }

public Iterator findN_1X1_Iter(Object e0,Object e2) {
    return graph.findN_1X1_Iter(e0,e2); }

public Iterator findN_X11_Iter(Object e1,Object e2) {
    return graph.findN_X11_Iter(e1,e2); }

public Iterator findN_1XA_Iter(Object e0) {
    return graph.findN_1XA_Iter(e0); }

public Iterator findN_XAA_Iter() {
    return graph.findN_XAA_Iter(); }

public Iterator findN_X1A_Iter(Object e1) {
    return graph.findN_X1A_Iter(e1); }

public Object find1_11X(Object e0,Object e1,Obs o) {
    return graph.find1_11X(e0,e1,o); }

public Object find1_1X1(Object e0,Object e2,Obs o) {
    return graph.find1_1X1(e0,e2,o); }

public Object find1_X11(Object e1,Object e2,Obs o) {
    return graph.find1_X11(e1,e2,o); }

public Object find1_1XA(Object e0,Obs o) {
    return graph.find1_1XA(e0,o); }

public Object find1_XAA(Obs o) {
    return graph.find1_XAA(o); }

public Object find1_X1A(Object e1,Obs o) {
    return graph.find1_X1A(e1,o); }

public Iterator findN_11X_Iter(Object e0,Object e1,Obs o) {
    return graph.findN_11X_Iter(e0,e1,o); }

public Iterator findN_1X1_Iter(Object e0,Object e2,Obs o) {
    return graph.findN_1X1_Iter(e0,e2,o); }

public Iterator findN_X11_Iter(Object e1,Object e2,Obs o) {
    return graph.findN_X11_Iter(e1,e2,o); }

public Iterator findN_1XA_Iter(Object e0,Obs o) {
    return graph.findN_1XA_Iter(e0,o); }

public Iterator findN_XAA_Iter(Obs o) {
    return graph.findN_XAA_Iter(o); }

public Iterator findN_X1A_Iter(Object e1,Obs o) {
    return graph.findN_X1A_Iter(e1,o); }


}

