// AUTOGENERATED By makeswamp2.py - DO NOT EDIT.

    package org.fenfire.swamp.impl;
    import org.nongnu.navidoc.util.Obs;
    import org.fenfire.swamp.*;
    import java.util.*;

    public class SimpleHashGraph extends AbstractGraph {
	private StdObserver observer = new StdObserver();

        protected class Key {
            Object e1, e2;
            public Key(Object e1, Object e2) {
                this.e1 = e1; this.e2 = e2;
            }
            public boolean equals(Object o) {
                if(!(o instanceof Key)) return false;
                Key t=(Key)o;
                return e1.equals(t.e1) && e2.equals(t.e2);
            }
            public int hashCode() {
                return e1.hashCode() + 127*e2.hashCode();
            }
        }

        Map map_11X = new HashMap();
public Object find1_11X(Object e0, Object e1, Obs obs) {
    Iterator i = findN_11X_Iter(e0, e1, obs);
    if(!i.hasNext()) return null;
    Object result = i.next();
    if(i.hasNext())
        throw new NotUniqueError(e0, e1, null);
    return result;
}
public Iterator findN_11X_Iter(Object e0, Object e1, Obs obs){
    if(obs != null)
        observer.addObs(e0, e1, observer.WILDCARD, obs);

    Set s = getSet_11X(e0, e1);
    return s.iterator();
}
public Set getSet_11X(Object e0, Object e1) {
    Map m = map_11X;
    Key key = new Key(e0, e1);
    if(!m.containsKey(key)) m.put(key, new HashSet());
    return (Set)m.get(key);
}
Map map_1X1 = new HashMap();
public Object find1_1X1(Object e0, Object e1, Obs obs) {
    Iterator i = findN_1X1_Iter(e0, e1, obs);
    if(!i.hasNext()) return null;
    Object result = i.next();
    if(i.hasNext())
        throw new NotUniqueError(e0, e1, null);
    return result;
}
public Iterator findN_1X1_Iter(Object e0, Object e1, Obs obs){
    if(obs != null)
        observer.addObs(e0, observer.WILDCARD, e1, obs);

    Set s = getSet_1X1(e0, e1);
    return s.iterator();
}
public Set getSet_1X1(Object e0, Object e1) {
    Map m = map_1X1;
    Key key = new Key(e0, e1);
    if(!m.containsKey(key)) m.put(key, new HashSet());
    return (Set)m.get(key);
}
Map map_X11 = new HashMap();
public Object find1_X11(Object e0, Object e1, Obs obs) {
    Iterator i = findN_X11_Iter(e0, e1, obs);
    if(!i.hasNext()) return null;
    Object result = i.next();
    if(i.hasNext())
        throw new NotUniqueError(e0, e1, null);
    return result;
}
public Iterator findN_X11_Iter(Object e0, Object e1, Obs obs){
    if(obs != null)
        observer.addObs(observer.WILDCARD, e0, e1, obs);

    Set s = getSet_X11(e0, e1);
    return s.iterator();
}
public Set getSet_X11(Object e0, Object e1) {
    Map m = map_X11;
    Key key = new Key(e0, e1);
    if(!m.containsKey(key)) m.put(key, new HashSet());
    return (Set)m.get(key);
}
Map map_1XA = new HashMap();
public Object find1_1XA(Object e0, Obs obs) {
    Iterator i = findN_1XA_Iter(e0, obs);
    if(!i.hasNext()) return null;
    Object result = i.next();
    if(i.hasNext())
        throw new NotUniqueError(e0, null, null);
    return result;
}
public Iterator findN_1XA_Iter(Object e0, Obs obs){
    if(obs != null)
        observer.addObs(e0, observer.WILDCARD, observer.WILDCARD, obs);

    Set s = getSet_1XA(e0);
    return s.iterator();
}
public Set getSet_1XA(Object e0) {
    Map m = map_1XA;
    Key key = new Key(e0, "ANY");
    if(!m.containsKey(key)) m.put(key, new HashSet());
    return (Set)m.get(key);
}
Map map_XAA = new HashMap();
public Object find1_XAA(Obs obs) {
    Iterator i = findN_XAA_Iter(obs);
    if(!i.hasNext()) return null;
    Object result = i.next();
    if(i.hasNext())
        throw new NotUniqueError(null, null, null);
    return result;
}
public Iterator findN_XAA_Iter(Obs obs){
    if(obs != null)
        observer.addObs(observer.WILDCARD, observer.WILDCARD, observer.WILDCARD, obs);

    Set s = getSet_XAA();
    return s.iterator();
}
public Set getSet_XAA() {
    Map m = map_XAA;
    Key key = new Key("ANY", "ANY");
    if(!m.containsKey(key)) m.put(key, new HashSet());
    return (Set)m.get(key);
}
Map map_X1A = new HashMap();
public Object find1_X1A(Object e0, Obs obs) {
    Iterator i = findN_X1A_Iter(e0, obs);
    if(!i.hasNext()) return null;
    Object result = i.next();
    if(i.hasNext())
        throw new NotUniqueError(e0, null, null);
    return result;
}
public Iterator findN_X1A_Iter(Object e0, Obs obs){
    if(obs != null)
        observer.addObs(observer.WILDCARD, e0, observer.WILDCARD, obs);

    Set s = getSet_X1A(e0);
    return s.iterator();
}
public Set getSet_X1A(Object e0) {
    Map m = map_X1A;
    Key key = new Key(e0, "ANY");
    if(!m.containsKey(key)) m.put(key, new HashSet());
    return (Set)m.get(key);
}
public void rm_111(Object e0, Object e1, Object e2) {
    checkNode(e0); checkNode(e1); checkNodeOrLiteral(e2);
    getSet_11X(e0, e1).remove(e2);
    getSet_1X1(e0, e2).remove(e1);
    getSet_X11(e1, e2).remove(e0);
    getSet_1XA(e0).remove(e1);
    getSet_XAA().remove(e0);
    getSet_X1A(e1).remove(e0);
    
    observer.triggerObs(-1, e0, e1, e2);
}
public void add(Object e0, Object e1, Object e2) {
    checkNode(e0); checkNode(e1); checkNodeOrLiteral(e2);
    getSet_11X(e0, e1).add(e2);
    getSet_1X1(e0, e2).add(e1);
    getSet_X11(e1, e2).add(e0);
    getSet_1XA(e0).add(e1);
    getSet_XAA().add(e0);
    getSet_X1A(e1).add(e0);
    
    observer.triggerObs(1, e0, e1, e2);
}


	public void set1_11X(Object subject, Object predicate, Object object) {
	    rm_11A(subject, predicate);
	    add(subject, predicate, object);
	}

	public boolean contains(Object e0, Object e1, Object e2, Obs o) {
	    if(o != null) observer.addObs(e0, e1, e2, o);
            return getSet_11X(e0, e1).contains(e2);
	}

        public void addAll(Graph g) {
	    for (Iterator i=g.findN_XAA_Iter(); i.hasNext();) {
                Object subj = i.next();
                for (Iterator j=g.findN_1XA_Iter(subj); j.hasNext();) {
                    Object pred = j.next();
		    for (Iterator k=g.findN_11X_Iter(subj,pred); k.hasNext();){
		        Object obj = k.next();
                        add(subj, pred, obj);
                    }
                }
            }
        }

        protected void checkNode(Object node) {
            if(!Nodes.isNode(node))
                throw new IllegalArgumentException("Not a node: "+node);
        }

        protected void checkNodeOrLiteral(Object node) {
            if(!Nodes.isNode(node) && !(node instanceof Literal))
                throw new IllegalArgumentException("Not a node or literal: "+node);
        }
    }
