// AUTOGENERATED By makeswamp.py - DO NOT EDIT.

    package org.fenfire.swamp.impl;
    import org.nongnu.navidoc.util.Obs;
    import org.fenfire.swamp.*;

    import java.util.HashMap;
    import java.util.Set;
    import java.util.HashSet;
    import java.util.ArrayList;
    import java.util.Iterator;

    
              /** An RDF Graph implemented by HashMaps.
               * Relatively inefficient but a basic implementation
               * that can be used as a reference.
               */
              
    public class SimpleHashGraph extends AbstractGraph {

	private HashMap ind_012 = new HashMap();
private HashMap ind_021 = new HashMap();
private HashMap ind_120 = new HashMap();
private HashMap ind_102 = new HashMap();


	private HashSet emptySet = new HashSet();
	private StdObserver observer = new StdObserver();

	private final void rm_ind(HashMap ind, Object o1, Object o2, Object o3) {
        
              HashMap m2 = (HashMap)ind.get(o1);
              if(m2 == null) return;
              HashSet m3 = (HashSet)m2.get(o2);
              if(m3 == null) return;
              m3.remove(o3);
              
	}

	private final void add_ind(HashMap ind, Object o1, Object o2, Object o3) {
        
              HashMap m2 = (HashMap)ind.get(o1);
              if(m2 == null) {
                  m2 = new HashMap();
                  ind.put(o1, m2);
              }
              HashSet s = (HashSet)m2.get(o2);
              if(s == null) {
                  s = new HashSet();
                  m2.put(o2, s);
              }
              s.add(o3);
              
	}

	public void set1_11X(Object subject, Object predicate, Object object) {
	    rm_11A(subject, predicate);

	    add(subject, predicate, object);
	}

	public boolean contains(Object e0, Object e1, Object e2, Obs o) {
	    if(o != null) observer.addObs(e0, e1, e2, o);

            
              HashMap hash1 = (HashMap) ind_012.get(e0);
              if(hash1 == null) return false; 
	
              HashSet hash2 = (HashSet) hash1.get(e1);
              if(hash2 == null) return false; 
	
              HashSet resSet = hash2;
              return resSet.contains(e2);
              
	}

	//////////////////
	// Finds

	public Object find1_11X(Object e0,Object e1,Obs obs) {
if(obs != null) observer.addObs(e0, e1, observer.WILDCARD, obs);

                        HashMap hash1 = (HashMap) ind_012.get(e0);
                        if(hash1 == null) return null; 
                    
                        HashSet hash2 = (HashSet) hash1.get(e1);
                        if(hash2 == null) return null; 
                    
                            HashSet resSet = hash2;
                        
                    if(resSet.size() == 0) return null;
                    if(resSet.size() == 1) return resSet.iterator().next();
                    throw new NotUniqueError(e0,e1,null);
                }

public Object find1_1X1(Object e0,Object e2,Obs obs) {
if(obs != null) observer.addObs(e0, observer.WILDCARD, e2, obs);

                        HashMap hash1 = (HashMap) ind_021.get(e0);
                        if(hash1 == null) return null; 
                    
                        HashSet hash2 = (HashSet) hash1.get(e2);
                        if(hash2 == null) return null; 
                    
                            HashSet resSet = hash2;
                        
                    if(resSet.size() == 0) return null;
                    if(resSet.size() == 1) return resSet.iterator().next();
                    throw new NotUniqueError(e0,null,e2);
                }

public Object find1_X11(Object e1,Object e2,Obs obs) {
if(obs != null) observer.addObs(observer.WILDCARD, e1, e2, obs);

                        HashMap hash1 = (HashMap) ind_120.get(e1);
                        if(hash1 == null) return null; 
                    
                        HashSet hash2 = (HashSet) hash1.get(e2);
                        if(hash2 == null) return null; 
                    
                            HashSet resSet = hash2;
                        
                    if(resSet.size() == 0) return null;
                    if(resSet.size() == 1) return resSet.iterator().next();
                    throw new NotUniqueError(null,e1,e2);
                }

public Object find1_1XA(Object e0,Obs obs) {
if(obs != null) observer.addObs(e0, observer.WILDCARD, observer.WILDCARD, obs);

                        HashMap hash1 = (HashMap) ind_012.get(e0);
                        if(hash1 == null) return null; 
                    
                            Set resSet = hash1.keySet();
                        
                    if(resSet.size() == 0) return null;
                    if(resSet.size() == 1) return resSet.iterator().next();
                    throw new NotUniqueError(e0,null,null);
                }

public Object find1_XAA(Obs obs) {
if(obs != null) observer.addObs(observer.WILDCARD, observer.WILDCARD, observer.WILDCARD, obs);

                            Set resSet = ind_012.keySet();
                        
                    if(resSet.size() == 0) return null;
                    if(resSet.size() == 1) return resSet.iterator().next();
                    throw new NotUniqueError(null,null,null);
                }

public Object find1_X1A(Object e1,Obs obs) {
if(obs != null) observer.addObs(observer.WILDCARD, e1, observer.WILDCARD, obs);

                        HashMap hash1 = (HashMap) ind_102.get(e1);
                        if(hash1 == null) return null; 
                    
                            Set resSet = hash1.keySet();
                        
                    if(resSet.size() == 0) return null;
                    if(resSet.size() == 1) return resSet.iterator().next();
                    throw new NotUniqueError(null,e1,null);
                }

public Iterator findN_11X_Iter(Object e0,Object e1,Obs obs) {
if(obs != null) observer.addObs(e0, e1, observer.WILDCARD, obs);

                        HashMap hash1 = (HashMap) ind_012.get(e0);
                        if(hash1 == null) return emptySet.iterator(); 
                    
                        HashSet hash2 = (HashSet) hash1.get(e1);
                        if(hash2 == null) return emptySet.iterator(); 
                    
                            HashSet resSet = hash2;
                        return resSet.iterator();
}

public Iterator findN_1X1_Iter(Object e0,Object e2,Obs obs) {
if(obs != null) observer.addObs(e0, observer.WILDCARD, e2, obs);

                        HashMap hash1 = (HashMap) ind_021.get(e0);
                        if(hash1 == null) return emptySet.iterator(); 
                    
                        HashSet hash2 = (HashSet) hash1.get(e2);
                        if(hash2 == null) return emptySet.iterator(); 
                    
                            HashSet resSet = hash2;
                        return resSet.iterator();
}

public Iterator findN_X11_Iter(Object e1,Object e2,Obs obs) {
if(obs != null) observer.addObs(observer.WILDCARD, e1, e2, obs);

                        HashMap hash1 = (HashMap) ind_120.get(e1);
                        if(hash1 == null) return emptySet.iterator(); 
                    
                        HashSet hash2 = (HashSet) hash1.get(e2);
                        if(hash2 == null) return emptySet.iterator(); 
                    
                            HashSet resSet = hash2;
                        return resSet.iterator();
}

public Iterator findN_1XA_Iter(Object e0,Obs obs) {
if(obs != null) observer.addObs(e0, observer.WILDCARD, observer.WILDCARD, obs);

                        HashMap hash1 = (HashMap) ind_012.get(e0);
                        if(hash1 == null) return emptySet.iterator(); 
                    
                            Set resSet = hash1.keySet();
                        return resSet.iterator();
}

public Iterator findN_XAA_Iter(Obs obs) {
if(obs != null) observer.addObs(observer.WILDCARD, observer.WILDCARD, observer.WILDCARD, obs);

                            Set resSet = ind_012.keySet();
                        return resSet.iterator();
}

public Iterator findN_X1A_Iter(Object e1,Obs obs) {
if(obs != null) observer.addObs(observer.WILDCARD, e1, observer.WILDCARD, obs);

                        HashMap hash1 = (HashMap) ind_102.get(e1);
                        if(hash1 == null) return emptySet.iterator(); 
                    
                            Set resSet = hash1.keySet();
                        return resSet.iterator();
}




	// --------------------------------
	// Methods which modify the structure by calling the single-triple
	// methods below.
	//


	// --------------------------------
	// Methods which actually modify the structure
	//

	public void rm_111(Object e0, Object e1, Object e2) {
            checkNode(e0); checkNode(e1); checkNodeOrLiteral(e2);
	    
	    rm_ind(ind_012, e0, e1, e2);
	
	    rm_ind(ind_021, e0, e2, e1);
	
	    rm_ind(ind_120, e1, e2, e0);
	
	    rm_ind(ind_102, e1, e0, e2);
	

	    observer.triggerObs(-1, e0, e1, e2);
	}

	public void add(Object e0, Object e1, Object e2) {
            checkNode(e0); checkNode(e1); checkNodeOrLiteral(e2);
	    
	    add_ind(ind_012, e0, e1, e2);
	
	    add_ind(ind_021, e0, e2, e1);
	
	    add_ind(ind_120, e1, e2, e0);
	
	    add_ind(ind_102, e1, e0, e2);
	

	    observer.triggerObs(1, e0, e1, e2);
	}

        public void addAll(Graph g) {
	    for (Iterator i=g.findN_XAA_Iter(); i.hasNext();) {
                Object subj = i.next();
                for (Iterator j=g.findN_1XA_Iter(subj); j.hasNext();) {
                    Object pred = j.next();
		    for (Iterator k=g.findN_11X_Iter(subj,pred); k.hasNext();){
		        Object obj = k.next();
                        add(subj, pred, obj);
                    }
                }
            }
        }

        protected void checkNode(Object node) {
            if(!Nodes.isNode(node))
                throw new IllegalArgumentException("Not a node: "+node);
        }

        protected void checkNodeOrLiteral(Object node) {
            if(!Nodes.isNode(node) && !(node instanceof Literal))
                throw new IllegalArgumentException("Not a node or literal: "+node);
        }

    }




    