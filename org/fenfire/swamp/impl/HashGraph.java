// AUTOGENERATED By makeswamp.py - DO NOT EDIT.

    package org.fenfire.swamp.impl;
    import org.nongnu.navidoc.util.Obs;
    import org.fenfire.swamp.*;

    import java.util.HashMap;
    import java.util.Set;
    import java.util.HashSet;
    import java.util.ArrayList;
    import java.util.Iterator;

    
              /** A more efficient implementation of Graph
               *  than SimpleHashGraph. This implementation uses PairMap,
               *  which is based on AbstractHashtable, for its indices,
               *  thus avoiding the overhead of creating objects per triple.
               */
              
    public class HashGraph extends AbstractGraph {

	private PairMap ind_012 = new PairMap();
private PairMap ind_021 = new PairMap();
private PairMap ind_120 = new PairMap();
private PairMap ind_0A1 = new PairMap();
private PairMap ind_AA0 = new PairMap();
private PairMap ind_1A0 = new PairMap();


	private HashSet emptySet = new HashSet();
	private StdObserver observer = new StdObserver();

	private final void rm_ind(PairMap ind, Object o1, Object o2, Object o3) {
        
              ind.rm(o1, o2, o3);
              
	}

	private final void add_ind(PairMap ind, Object o1, Object o2, Object o3) {
        
              ind.add(o1, o2, o3);
              
	}

	public void set1_11X(Object subject, Object predicate, Object object) {
	    rm_11A(subject, predicate);

	    add(subject, predicate, object);
	}

	public boolean contains(Object e0, Object e1, Object e2, Obs o) {
	    if(o != null) observer.addObs(e0, e1, e2, o);

            
              return ind_012.contains(e0, e1, e2);
              
	}

	//////////////////
	// Finds

	public Object find1_11X(Object e0,Object e1,Obs obs) {
if(obs != null) observer.addObs(e0, e1, observer.WILDCARD, obs);

                    try {
                        return ind_012.get(e0, e1);
                    } catch(PairMap.NotUniqueException _) {
                        throw new NotUniqueError(e0,e1,null);
                    }
                }

public Object find1_1X1(Object e0,Object e2,Obs obs) {
if(obs != null) observer.addObs(e0, observer.WILDCARD, e2, obs);

                    try {
                        return ind_021.get(e0, e2);
                    } catch(PairMap.NotUniqueException _) {
                        throw new NotUniqueError(e0,null,e2);
                    }
                }

public Object find1_X11(Object e1,Object e2,Obs obs) {
if(obs != null) observer.addObs(observer.WILDCARD, e1, e2, obs);

                    try {
                        return ind_120.get(e1, e2);
                    } catch(PairMap.NotUniqueException _) {
                        throw new NotUniqueError(null,e1,e2);
                    }
                }

public Object find1_1XA(Object e0,Obs obs) {
if(obs != null) observer.addObs(e0, observer.WILDCARD, observer.WILDCARD, obs);

                    try {
                        return ind_0A1.get(e0, null);
                    } catch(PairMap.NotUniqueException _) {
                        throw new NotUniqueError(e0,null,null);
                    }
                }

public Object find1_XAA(Obs obs) {
if(obs != null) observer.addObs(observer.WILDCARD, observer.WILDCARD, observer.WILDCARD, obs);

                    try {
                        return ind_AA0.get(null, null);
                    } catch(PairMap.NotUniqueException _) {
                        throw new NotUniqueError(null,null,null);
                    }
                }

public Object find1_X1A(Object e1,Obs obs) {
if(obs != null) observer.addObs(observer.WILDCARD, e1, observer.WILDCARD, obs);

                    try {
                        return ind_1A0.get(e1, null);
                    } catch(PairMap.NotUniqueException _) {
                        throw new NotUniqueError(null,e1,null);
                    }
                }

public Iterator findN_11X_Iter(Object e0,Object e1,Obs obs) {
if(obs != null) observer.addObs(e0, e1, observer.WILDCARD, obs);

                    return ind_012.getIter(e0, e1);
                }

public Iterator findN_1X1_Iter(Object e0,Object e2,Obs obs) {
if(obs != null) observer.addObs(e0, observer.WILDCARD, e2, obs);

                    return ind_021.getIter(e0, e2);
                }

public Iterator findN_X11_Iter(Object e1,Object e2,Obs obs) {
if(obs != null) observer.addObs(observer.WILDCARD, e1, e2, obs);

                    return ind_120.getIter(e1, e2);
                }

public Iterator findN_1XA_Iter(Object e0,Obs obs) {
if(obs != null) observer.addObs(e0, observer.WILDCARD, observer.WILDCARD, obs);

                    return ind_0A1.getIter(e0, null);
                }

public Iterator findN_XAA_Iter(Obs obs) {
if(obs != null) observer.addObs(observer.WILDCARD, observer.WILDCARD, observer.WILDCARD, obs);

                    return ind_AA0.getIter(null, null);
                }

public Iterator findN_X1A_Iter(Object e1,Obs obs) {
if(obs != null) observer.addObs(observer.WILDCARD, e1, observer.WILDCARD, obs);

                    return ind_1A0.getIter(e1, null);
                }




	// --------------------------------
	// Methods which modify the structure by calling the single-triple
	// methods below.
	//


	// --------------------------------
	// Methods which actually modify the structure
	//

	public void rm_111(Object e0, Object e1, Object e2) {
            checkNode(e0); checkNode(e1); checkNodeOrLiteral(e2);
	    
	    rm_ind(ind_012, e0, e1, e2);
	
	    rm_ind(ind_021, e0, e2, e1);
	
	    rm_ind(ind_120, e1, e2, e0);
	
	    rm_ind(ind_0A1, e0, null, e1);
	
	    rm_ind(ind_AA0, null, null, e0);
	
	    rm_ind(ind_1A0, e1, null, e0);
	

	    observer.triggerObs(-1, e0, e1, e2);
	}

	public void add(Object e0, Object e1, Object e2) {
            checkNode(e0); checkNode(e1); checkNodeOrLiteral(e2);
	    
	    add_ind(ind_012, e0, e1, e2);
	
	    add_ind(ind_021, e0, e2, e1);
	
	    add_ind(ind_120, e1, e2, e0);
	
	    add_ind(ind_0A1, e0, null, e1);
	
	    add_ind(ind_AA0, null, null, e0);
	
	    add_ind(ind_1A0, e1, null, e0);
	

	    observer.triggerObs(1, e0, e1, e2);
	}

        public void addAll(Graph g) {
	    for (Iterator i=g.findN_XAA_Iter(); i.hasNext();) {
                Object subj = i.next();
                for (Iterator j=g.findN_1XA_Iter(subj); j.hasNext();) {
                    Object pred = j.next();
		    for (Iterator k=g.findN_11X_Iter(subj,pred); k.hasNext();){
		        Object obj = k.next();
                        add(subj, pred, obj);
                    }
                }
            }
        }

        protected void checkNode(Object node) {
            if(!Nodes.isNode(node))
                throw new IllegalArgumentException("Not a node: "+node);
        }

        protected void checkNodeOrLiteral(Object node) {
            if(!Nodes.isNode(node) && !(node instanceof Literal))
                throw new IllegalArgumentException("Not a node or literal: "+node);
        }

    }




    