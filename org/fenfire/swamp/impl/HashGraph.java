// AUTOGENERATED By makeswamp2.py - DO NOT EDIT.

    package org.fenfire.swamp.impl;
    import org.nongnu.navidoc.util.Obs;
    import org.fenfire.swamp.*;
    import java.util.*;

    public class HashGraph extends AbstractGraph {
	private StdObserver observer = new StdObserver();

        PairMap map_11X = new PairMap();
public Object find1_11X(Object subj, Object pred, Obs obs) {
    if(obs != null)
        observer.addObs(subj, pred, observer.WILDCARD, obs);

    try {
        return map_11X.get(subj, pred);
    } catch(PairMap.NotUniqueException _) {
        throw new NotUniqueError(subj, pred, null);
    }
}
public Iterator findN_11X_Iter(Object subj, Object pred, Obs obs){
    if(obs != null)
        observer.addObs(subj, pred, observer.WILDCARD, obs);

    return map_11X.getIter(subj, pred);
}
PairMap map_1X1 = new PairMap();
public Object find1_1X1(Object subj, Object obj, Obs obs) {
    if(obs != null)
        observer.addObs(subj, observer.WILDCARD, obj, obs);

    try {
        return map_1X1.get(subj, obj);
    } catch(PairMap.NotUniqueException _) {
        throw new NotUniqueError(subj, null, obj);
    }
}
public Iterator findN_1X1_Iter(Object subj, Object obj, Obs obs){
    if(obs != null)
        observer.addObs(subj, observer.WILDCARD, obj, obs);

    return map_1X1.getIter(subj, obj);
}
PairMap map_X11 = new PairMap();
public Object find1_X11(Object pred, Object obj, Obs obs) {
    if(obs != null)
        observer.addObs(observer.WILDCARD, pred, obj, obs);

    try {
        return map_X11.get(pred, obj);
    } catch(PairMap.NotUniqueException _) {
        throw new NotUniqueError(null, pred, obj);
    }
}
public Iterator findN_X11_Iter(Object pred, Object obj, Obs obs){
    if(obs != null)
        observer.addObs(observer.WILDCARD, pred, obj, obs);

    return map_X11.getIter(pred, obj);
}
PairMap map_1XA = new PairMap();
public Object find1_1XA(Object subj, Obs obs) {
    if(obs != null)
        observer.addObs(subj, observer.WILDCARD, observer.WILDCARD, obs);

    try {
        return map_1XA.get(subj, null);
    } catch(PairMap.NotUniqueException _) {
        throw new NotUniqueError(subj, null, null);
    }
}
public Iterator findN_1XA_Iter(Object subj, Obs obs){
    if(obs != null)
        observer.addObs(subj, observer.WILDCARD, observer.WILDCARD, obs);

    return map_1XA.getIter(subj, null);
}
PairMap map_XAA = new PairMap();
public Object find1_XAA(Obs obs) {
    if(obs != null)
        observer.addObs(observer.WILDCARD, observer.WILDCARD, observer.WILDCARD, obs);

    try {
        return map_XAA.get(null, null);
    } catch(PairMap.NotUniqueException _) {
        throw new NotUniqueError(null, null, null);
    }
}
public Iterator findN_XAA_Iter(Obs obs){
    if(obs != null)
        observer.addObs(observer.WILDCARD, observer.WILDCARD, observer.WILDCARD, obs);

    return map_XAA.getIter(null, null);
}
PairMap map_X1A = new PairMap();
public Object find1_X1A(Object pred, Obs obs) {
    if(obs != null)
        observer.addObs(observer.WILDCARD, pred, observer.WILDCARD, obs);

    try {
        return map_X1A.get(pred, null);
    } catch(PairMap.NotUniqueException _) {
        throw new NotUniqueError(null, pred, null);
    }
}
public Iterator findN_X1A_Iter(Object pred, Obs obs){
    if(obs != null)
        observer.addObs(observer.WILDCARD, pred, observer.WILDCARD, obs);

    return map_X1A.getIter(pred, null);
}
public void rm_111(Object subj, Object pred, Object obj) {
    checkNode(subj); checkNode(pred); checkNodeOrLiteral(obj);
    map_11X.rm(subj, pred, obj);
    map_1X1.rm(subj, obj, pred);
    map_X11.rm(pred, obj, subj);
    map_1XA.rm(subj, null, pred);
    map_XAA.rm(null, null, subj);
    map_X1A.rm(pred, null, subj);
    
    observer.triggerObs(-1, subj, pred, obj);
}
public void add(Object subj, Object pred, Object obj) {
    checkNode(subj); checkNode(pred); checkNodeOrLiteral(obj);
    map_11X.add(subj, pred, obj);
    map_1X1.add(subj, obj, pred);
    map_X11.add(pred, obj, subj);
    map_1XA.add(subj, null, pred);
    map_XAA.add(null, null, subj);
    map_X1A.add(pred, null, subj);
    
    observer.triggerObs(1, subj, pred, obj);
}


	public boolean contains(Object subj, Object pred, Object obj, Obs o) {
	    if(o != null) observer.addObs(subj, pred, obj, o);
            return map_11X.contains(subj, pred, obj);
	}
    }
