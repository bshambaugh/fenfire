// AUTOGENERATED By makeswamp.py - DO NOT EDIT.

package org.fenfire.swamp.impl;
import org.fenfire.swamp.*;
import org.nongnu.navidoc.util.Obs;
import java.util.Iterator;
import java.util.ArrayList;

import java.util.*;

abstract public class AbstractQuadsGraph extends AbstractQuadsConstGraph implements QuadsGraph {
    static public boolean dbg = false;
    private void p(String s) { System.out.println("AbstractQuadsGraph:: "+s); }

    public QuadsGraph getObservedGraph(Obs o) {
	return new StdObservedQuadsGraph(this, o);
    }

    protected void checkNode(Object node) {
	if(!Nodes.isNode(node))
	    throw new IllegalArgumentException("Not a node: "+node);
    }
    
    protected void checkNodeOrLiteral(Object node) {
	if(!Nodes.isNode(node) && !(node instanceof Literal))
	    throw new IllegalArgumentException("Not a node or literal: "+node);
    }

    public void rm_111A(Object subj, Object pred, Object obj) {
    while(true) {
        Iterator i;
        i = findN_111X_Iter(subj, pred, obj);
        if(!i.hasNext()) return;
        Object context = i.next();

        rm_1111(subj, pred, obj, context);
    }
}
public void rm_11AA(Object subj, Object pred) {
    while(true) {
        Iterator i;
        i = findN_11XA_Iter(subj, pred);
        if(!i.hasNext()) return;
        Object obj = i.next();
        i = findN_111X_Iter(subj, pred, obj);
        if(!i.hasNext()) return;
        Object context = i.next();

        rm_1111(subj, pred, obj, context);
    }
}
public void rm_A11A(Object pred, Object obj) {
    while(true) {
        Iterator i;
        i = findN_X11A_Iter(pred, obj);
        if(!i.hasNext()) return;
        Object subj = i.next();
        i = findN_111X_Iter(subj, pred, obj);
        if(!i.hasNext()) return;
        Object context = i.next();

        rm_1111(subj, pred, obj, context);
    }
}
public void rm_1AAA(Object subj) {
    while(true) {
        Iterator i;
        i = findN_1XAA_Iter(subj);
        if(!i.hasNext()) return;
        Object pred = i.next();
        i = findN_11XA_Iter(subj, pred);
        if(!i.hasNext()) return;
        Object obj = i.next();
        i = findN_111X_Iter(subj, pred, obj);
        if(!i.hasNext()) return;
        Object context = i.next();

        rm_1111(subj, pred, obj, context);
    }
}
public void rm_11A1(Object subj, Object pred, Object context) {
    while(true) {
        Iterator i;
        i = findN_11X1_Iter(subj, pred, context);
        if(!i.hasNext()) return;
        Object obj = i.next();

        rm_1111(subj, pred, obj, context);
    }
}
public void rm_A111(Object pred, Object obj, Object context) {
    while(true) {
        Iterator i;
        i = findN_X111_Iter(pred, obj, context);
        if(!i.hasNext()) return;
        Object subj = i.next();

        rm_1111(subj, pred, obj, context);
    }
}
public void rm_1AA1(Object subj, Object context) {
    while(true) {
        Iterator i;
        i = findN_1XA1_Iter(subj, context);
        if(!i.hasNext()) return;
        Object pred = i.next();
        i = findN_11X1_Iter(subj, pred, context);
        if(!i.hasNext()) return;
        Object obj = i.next();

        rm_1111(subj, pred, obj, context);
    }
}
public void rm_AAA1(Object context) {
    while(true) {
        Iterator i;
        i = findN_XAA1_Iter(context);
        if(!i.hasNext()) return;
        Object subj = i.next();
        i = findN_1XA1_Iter(subj, context);
        if(!i.hasNext()) return;
        Object pred = i.next();
        i = findN_11X1_Iter(subj, pred, context);
        if(!i.hasNext()) return;
        Object obj = i.next();

        rm_1111(subj, pred, obj, context);
    }
}

}
