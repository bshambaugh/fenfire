// AUTOGENERATED By makeswamp.py - DO NOT EDIT.

package org.fenfire.swamp.impl;
import org.fenfire.swamp.*;
import org.nongnu.navidoc.util.Obs;
import java.util.Iterator;
import java.util.ArrayList;

abstract public class AbstractGraph extends AbstractConstGraph implements Graph {
    public Graph getObservedGraph(Obs o) {
	return new StdObservedGraph(this, o);
    }

    public void set1_11X(Object subject, Object predicate, Object object) {
	rm_11A(subject, predicate);
	add(subject, predicate, object);
    }

    public void addAll(Graph g) {
	for (Iterator i=g.findN_XAA_Iter(); i.hasNext();) {
	    Object subj = i.next();
	    for (Iterator j=g.findN_1XA_Iter(subj); j.hasNext();) {
		Object pred = j.next();
		for (Iterator k=g.findN_11X_Iter(subj,pred); k.hasNext();){
		    Object obj = k.next();
		    add(subj, pred, obj);
		}
	    }
	}
    }

    protected void checkNode(Object node) {
	if(!Nodes.isNode(node))
	    throw new IllegalArgumentException("Not a node: "+node);
    }
    
    protected void checkNodeOrLiteral(Object node) {
	if(!Nodes.isNode(node) && !(node instanceof Literal))
	    throw new IllegalArgumentException("Not a node or literal: "+node);
    }

    public void rm_11A(Object subj, Object pred) {
    while(true) {
        Iterator i;
        i = findN_11X_Iter(subj, pred);
        if(!i.hasNext()) return;
        Object obj = i.next();

        rm_111(subj, pred, obj);
    }
}
public void rm_1A1(Object subj, Object obj) {
    while(true) {
        Iterator i;
        i = findN_1X1_Iter(subj, obj);
        if(!i.hasNext()) return;
        Object pred = i.next();

        rm_111(subj, pred, obj);
    }
}
public void rm_1AA(Object subj) {
    while(true) {
        Iterator i;
        i = findN_1XA_Iter(subj);
        if(!i.hasNext()) return;
        Object pred = i.next();
        i = findN_11X_Iter(subj, pred);
        if(!i.hasNext()) return;
        Object obj = i.next();

        rm_111(subj, pred, obj);
    }
}
public void rm_A11(Object pred, Object obj) {
    while(true) {
        Iterator i;
        i = findN_X11_Iter(pred, obj);
        if(!i.hasNext()) return;
        Object subj = i.next();

        rm_111(subj, pred, obj);
    }
}
public void rm_A1A(Object pred) {
    while(true) {
        Iterator i;
        i = findN_X1A_Iter(pred);
        if(!i.hasNext()) return;
        Object subj = i.next();
        i = findN_11X_Iter(subj, pred);
        if(!i.hasNext()) return;
        Object obj = i.next();

        rm_111(subj, pred, obj);
    }
}
public void rm_AA1(Object obj) {
    while(true) {
        Iterator i;
        i = findN_XA1_Iter(obj);
        if(!i.hasNext()) return;
        Object subj = i.next();
        i = findN_1X1_Iter(subj, obj);
        if(!i.hasNext()) return;
        Object pred = i.next();

        rm_111(subj, pred, obj);
    }
}
public void rm_AAA() {
    while(true) {
        Iterator i;
        i = findN_XAA_Iter();
        if(!i.hasNext()) return;
        Object subj = i.next();
        i = findN_1XA_Iter(subj);
        if(!i.hasNext()) return;
        Object pred = i.next();
        i = findN_11X_Iter(subj, pred);
        if(!i.hasNext()) return;
        Object obj = i.next();

        rm_111(subj, pred, obj);
    }
}

}
