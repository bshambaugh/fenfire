// AUTOGENERATED By makeswamp2.py - DO NOT EDIT.

    package org.fenfire.swamp.impl;
    import org.nongnu.navidoc.util.Obs;
    import org.fenfire.swamp.*;
    import java.util.*;

    public class SimpleHashQuadsGraph extends AbstractQuadsGraph {
	private StdObserver observer = new StdObserver();

        protected class Key {
            Object e1, e2, e3;
            public Key(Object e1, Object e2, Object e3) {
                this.e1 = e1; this.e2 = e2; this.e3 = e3;
            }
            public boolean equals(Object o) {
                if(!(o instanceof Key)) return false;
                Key t=(Key)o;
                return e1.equals(t.e1) && e2.equals(t.e2) && e3.equals(t.e3);
            }
            public int hashCode() {
                return e1.hashCode() + 127*e2.hashCode() + 2047*e3.hashCode();
            }
        }

        Map map_111X = new HashMap();
public Object find1_111X(Object e0, Object e1, Object e2, Obs obs) {
    Iterator i = findN_111X_Iter(e0, e1, e2, obs);
    if(!i.hasNext()) return null;
    Object result = i.next();
    if(i.hasNext())
        throw new NotUniqueError(e0, e1, e2, null);
    return result;
}
public Iterator findN_111X_Iter(Object e0, Object e1, Object e2, Obs obs){
    if(obs != null)
        observer.addObs(e0, e1, e2, obs);

    Set s = getSet_111X(e0, e1, e2);
    return s.iterator();
}
public Set getSet_111X(Object e0, Object e1, Object e2) {
    Map m = map_111X;
    Key key = new Key(e0, e1, e2);
    if(!m.containsKey(key)) m.put(key, new HashSet());
    return (Set)m.get(key);
}
Map map_11X1 = new HashMap();
public Object find1_11X1(Object e0, Object e1, Object e2, Obs obs) {
    Iterator i = findN_11X1_Iter(e0, e1, e2, obs);
    if(!i.hasNext()) return null;
    Object result = i.next();
    if(i.hasNext())
        throw new NotUniqueError(e0, e1, e2, null);
    return result;
}
public Iterator findN_11X1_Iter(Object e0, Object e1, Object e2, Obs obs){
    if(obs != null)
        observer.addObs(e0, e1, observer.WILDCARD, obs);

    Set s = getSet_11X1(e0, e1, e2);
    return s.iterator();
}
public Set getSet_11X1(Object e0, Object e1, Object e2) {
    Map m = map_11X1;
    Key key = new Key(e0, e1, e2);
    if(!m.containsKey(key)) m.put(key, new HashSet());
    return (Set)m.get(key);
}
Map map_1X11 = new HashMap();
public Object find1_1X11(Object e0, Object e1, Object e2, Obs obs) {
    Iterator i = findN_1X11_Iter(e0, e1, e2, obs);
    if(!i.hasNext()) return null;
    Object result = i.next();
    if(i.hasNext())
        throw new NotUniqueError(e0, e1, e2, null);
    return result;
}
public Iterator findN_1X11_Iter(Object e0, Object e1, Object e2, Obs obs){
    if(obs != null)
        observer.addObs(e0, observer.WILDCARD, e1, obs);

    Set s = getSet_1X11(e0, e1, e2);
    return s.iterator();
}
public Set getSet_1X11(Object e0, Object e1, Object e2) {
    Map m = map_1X11;
    Key key = new Key(e0, e1, e2);
    if(!m.containsKey(key)) m.put(key, new HashSet());
    return (Set)m.get(key);
}
Map map_X111 = new HashMap();
public Object find1_X111(Object e0, Object e1, Object e2, Obs obs) {
    Iterator i = findN_X111_Iter(e0, e1, e2, obs);
    if(!i.hasNext()) return null;
    Object result = i.next();
    if(i.hasNext())
        throw new NotUniqueError(e0, e1, e2, null);
    return result;
}
public Iterator findN_X111_Iter(Object e0, Object e1, Object e2, Obs obs){
    if(obs != null)
        observer.addObs(observer.WILDCARD, e0, e1, obs);

    Set s = getSet_X111(e0, e1, e2);
    return s.iterator();
}
public Set getSet_X111(Object e0, Object e1, Object e2) {
    Map m = map_X111;
    Key key = new Key(e0, e1, e2);
    if(!m.containsKey(key)) m.put(key, new HashSet());
    return (Set)m.get(key);
}
Map map_11XA = new HashMap();
public Object find1_11XA(Object e0, Object e1, Obs obs) {
    Iterator i = findN_11XA_Iter(e0, e1, obs);
    if(!i.hasNext()) return null;
    Object result = i.next();
    if(i.hasNext())
        throw new NotUniqueError(e0, e1, null, null);
    return result;
}
public Iterator findN_11XA_Iter(Object e0, Object e1, Obs obs){
    if(obs != null)
        observer.addObs(e0, e1, observer.WILDCARD, obs);

    Set s = getSet_11XA(e0, e1);
    return s.iterator();
}
public Set getSet_11XA(Object e0, Object e1) {
    Map m = map_11XA;
    Key key = new Key(e0, e1, "ANY");
    if(!m.containsKey(key)) m.put(key, new HashSet());
    return (Set)m.get(key);
}
Map map_1X1A = new HashMap();
public Object find1_1X1A(Object e0, Object e1, Obs obs) {
    Iterator i = findN_1X1A_Iter(e0, e1, obs);
    if(!i.hasNext()) return null;
    Object result = i.next();
    if(i.hasNext())
        throw new NotUniqueError(e0, e1, null, null);
    return result;
}
public Iterator findN_1X1A_Iter(Object e0, Object e1, Obs obs){
    if(obs != null)
        observer.addObs(e0, observer.WILDCARD, e1, obs);

    Set s = getSet_1X1A(e0, e1);
    return s.iterator();
}
public Set getSet_1X1A(Object e0, Object e1) {
    Map m = map_1X1A;
    Key key = new Key(e0, e1, "ANY");
    if(!m.containsKey(key)) m.put(key, new HashSet());
    return (Set)m.get(key);
}
Map map_X11A = new HashMap();
public Object find1_X11A(Object e0, Object e1, Obs obs) {
    Iterator i = findN_X11A_Iter(e0, e1, obs);
    if(!i.hasNext()) return null;
    Object result = i.next();
    if(i.hasNext())
        throw new NotUniqueError(e0, e1, null, null);
    return result;
}
public Iterator findN_X11A_Iter(Object e0, Object e1, Obs obs){
    if(obs != null)
        observer.addObs(observer.WILDCARD, e0, e1, obs);

    Set s = getSet_X11A(e0, e1);
    return s.iterator();
}
public Set getSet_X11A(Object e0, Object e1) {
    Map m = map_X11A;
    Key key = new Key(e0, e1, "ANY");
    if(!m.containsKey(key)) m.put(key, new HashSet());
    return (Set)m.get(key);
}
Map map_11AX = new HashMap();
public Object find1_11AX(Object e0, Object e1, Obs obs) {
    Iterator i = findN_11AX_Iter(e0, e1, obs);
    if(!i.hasNext()) return null;
    Object result = i.next();
    if(i.hasNext())
        throw new NotUniqueError(e0, e1, null, null);
    return result;
}
public Iterator findN_11AX_Iter(Object e0, Object e1, Obs obs){
    if(obs != null)
        observer.addObs(e0, e1, observer.WILDCARD, obs);

    Set s = getSet_11AX(e0, e1);
    return s.iterator();
}
public Set getSet_11AX(Object e0, Object e1) {
    Map m = map_11AX;
    Key key = new Key(e0, e1, "ANY");
    if(!m.containsKey(key)) m.put(key, new HashSet());
    return (Set)m.get(key);
}
Map map_1XAA = new HashMap();
public Object find1_1XAA(Object e0, Obs obs) {
    Iterator i = findN_1XAA_Iter(e0, obs);
    if(!i.hasNext()) return null;
    Object result = i.next();
    if(i.hasNext())
        throw new NotUniqueError(e0, null, null, null);
    return result;
}
public Iterator findN_1XAA_Iter(Object e0, Obs obs){
    if(obs != null)
        observer.addObs(e0, observer.WILDCARD, observer.WILDCARD, obs);

    Set s = getSet_1XAA(e0);
    return s.iterator();
}
public Set getSet_1XAA(Object e0) {
    Map m = map_1XAA;
    Key key = new Key(e0, "ANY", "ANY");
    if(!m.containsKey(key)) m.put(key, new HashSet());
    return (Set)m.get(key);
}
Map map_1XA1 = new HashMap();
public Object find1_1XA1(Object e0, Object e1, Obs obs) {
    Iterator i = findN_1XA1_Iter(e0, e1, obs);
    if(!i.hasNext()) return null;
    Object result = i.next();
    if(i.hasNext())
        throw new NotUniqueError(e0, e1, null, null);
    return result;
}
public Iterator findN_1XA1_Iter(Object e0, Object e1, Obs obs){
    if(obs != null)
        observer.addObs(e0, observer.WILDCARD, observer.WILDCARD, obs);

    Set s = getSet_1XA1(e0, e1);
    return s.iterator();
}
public Set getSet_1XA1(Object e0, Object e1) {
    Map m = map_1XA1;
    Key key = new Key(e0, e1, "ANY");
    if(!m.containsKey(key)) m.put(key, new HashSet());
    return (Set)m.get(key);
}
Map map_XAAA = new HashMap();
public Object find1_XAAA(Obs obs) {
    Iterator i = findN_XAAA_Iter(obs);
    if(!i.hasNext()) return null;
    Object result = i.next();
    if(i.hasNext())
        throw new NotUniqueError(null, null, null, null);
    return result;
}
public Iterator findN_XAAA_Iter(Obs obs){
    if(obs != null)
        observer.addObs(observer.WILDCARD, observer.WILDCARD, observer.WILDCARD, obs);

    Set s = getSet_XAAA();
    return s.iterator();
}
public Set getSet_XAAA() {
    Map m = map_XAAA;
    Key key = new Key("ANY", "ANY", "ANY");
    if(!m.containsKey(key)) m.put(key, new HashSet());
    return (Set)m.get(key);
}
Map map_XAA1 = new HashMap();
public Object find1_XAA1(Object e0, Obs obs) {
    Iterator i = findN_XAA1_Iter(e0, obs);
    if(!i.hasNext()) return null;
    Object result = i.next();
    if(i.hasNext())
        throw new NotUniqueError(e0, null, null, null);
    return result;
}
public Iterator findN_XAA1_Iter(Object e0, Obs obs){
    if(obs != null)
        observer.addObs(observer.WILDCARD, observer.WILDCARD, observer.WILDCARD, obs);

    Set s = getSet_XAA1(e0);
    return s.iterator();
}
public Set getSet_XAA1(Object e0) {
    Map m = map_XAA1;
    Key key = new Key(e0, "ANY", "ANY");
    if(!m.containsKey(key)) m.put(key, new HashSet());
    return (Set)m.get(key);
}
Map map_X1AA = new HashMap();
public Object find1_X1AA(Object e0, Obs obs) {
    Iterator i = findN_X1AA_Iter(e0, obs);
    if(!i.hasNext()) return null;
    Object result = i.next();
    if(i.hasNext())
        throw new NotUniqueError(e0, null, null, null);
    return result;
}
public Iterator findN_X1AA_Iter(Object e0, Obs obs){
    if(obs != null)
        observer.addObs(observer.WILDCARD, e0, observer.WILDCARD, obs);

    Set s = getSet_X1AA(e0);
    return s.iterator();
}
public Set getSet_X1AA(Object e0) {
    Map m = map_X1AA;
    Key key = new Key(e0, "ANY", "ANY");
    if(!m.containsKey(key)) m.put(key, new HashSet());
    return (Set)m.get(key);
}
Map map_X1A1 = new HashMap();
public Object find1_X1A1(Object e0, Object e1, Obs obs) {
    Iterator i = findN_X1A1_Iter(e0, e1, obs);
    if(!i.hasNext()) return null;
    Object result = i.next();
    if(i.hasNext())
        throw new NotUniqueError(e0, e1, null, null);
    return result;
}
public Iterator findN_X1A1_Iter(Object e0, Object e1, Obs obs){
    if(obs != null)
        observer.addObs(observer.WILDCARD, e0, observer.WILDCARD, obs);

    Set s = getSet_X1A1(e0, e1);
    return s.iterator();
}
public Set getSet_X1A1(Object e0, Object e1) {
    Map m = map_X1A1;
    Key key = new Key(e0, e1, "ANY");
    if(!m.containsKey(key)) m.put(key, new HashSet());
    return (Set)m.get(key);
}
public void rm_1111(Object e0, Object e1, Object e2, Object e3) {
    checkNode(e0); checkNode(e1); checkNodeOrLiteral(e2);
    getSet_111X(e0, e1, e2).remove(e3);
    getSet_11X1(e0, e1, e3).remove(e2);
    getSet_1X11(e0, e2, e3).remove(e1);
    getSet_X111(e1, e2, e3).remove(e0);
    getSet_11XA(e0, e1).remove(e2);
    getSet_1X1A(e0, e2).remove(e1);
    getSet_X11A(e1, e2).remove(e0);
    getSet_11AX(e0, e1).remove(e3);
    getSet_1XAA(e0).remove(e1);
    getSet_1XA1(e0, e3).remove(e1);
    getSet_XAAA().remove(e0);
    getSet_XAA1(e3).remove(e0);
    getSet_X1AA(e1).remove(e0);
    getSet_X1A1(e1, e3).remove(e0);
    
    observer.triggerObs(-1, e0, e1, e2);
}
public void add(Object e0, Object e1, Object e2, Object e3) {
    checkNode(e0); checkNode(e1); checkNodeOrLiteral(e2);
    getSet_111X(e0, e1, e2).add(e3);
    getSet_11X1(e0, e1, e3).add(e2);
    getSet_1X11(e0, e2, e3).add(e1);
    getSet_X111(e1, e2, e3).add(e0);
    getSet_11XA(e0, e1).add(e2);
    getSet_1X1A(e0, e2).add(e1);
    getSet_X11A(e1, e2).add(e0);
    getSet_11AX(e0, e1).add(e3);
    getSet_1XAA(e0).add(e1);
    getSet_1XA1(e0, e3).add(e1);
    getSet_XAAA().add(e0);
    getSet_XAA1(e3).add(e0);
    getSet_X1AA(e1).add(e0);
    getSet_X1A1(e1, e3).add(e0);
    
    observer.triggerObs(1, e0, e1, e2);
}


	public boolean contains(Object e0, Object e1, Object e2, Object e3, Obs o) {
	    if(o != null) observer.addObs(e0, e1, e2, o);
            return getSet_11X1(e0, e1, e3).contains(e2);
	}

        protected void checkNode(Object node) {
            if(!Nodes.isNode(node))
                throw new IllegalArgumentException("Not a node: "+node);
        }

        protected void checkNodeOrLiteral(Object node) {
            if(!Nodes.isNode(node) && !(node instanceof Literal))
                throw new IllegalArgumentException("Not a node or literal: "+node);
        }
    }
