// AUTOGENERATED By makeswamp2.py - DO NOT EDIT.

    package org.fenfire.swamp.impl;
    import org.nongnu.navidoc.util.Obs;
    import org.fenfire.swamp.*;
    import java.util.*;

    public class HashQuadsGraph extends AbstractQuadsGraph {
	private StdObserver observer = new StdObserver();

        PairMap map_111X = new PairMap();
public Object find1_111X(Object e0, Object e1, Object e2, Obs obs) {
    if(obs != null)
        observer.addObs(e0, e1, e2, obs);

    try {
        return map_111X.get(e0, e1, e2);
    } catch(PairMap.NotUniqueException _) {
        throw new NotUniqueError(e0, e1, e2, null);
    }
}
public Iterator findN_111X_Iter(Object e0, Object e1, Object e2, Obs obs){
    if(obs != null)
        observer.addObs(e0, e1, e2, obs);

    return map_111X.getIter(e0, e1, e2);
}
PairMap map_11X1 = new PairMap();
public Object find1_11X1(Object e0, Object e1, Object e2, Obs obs) {
    if(obs != null)
        observer.addObs(e0, e1, observer.WILDCARD, obs);

    try {
        return map_11X1.get(e0, e1, e2);
    } catch(PairMap.NotUniqueException _) {
        throw new NotUniqueError(e0, e1, e2, null);
    }
}
public Iterator findN_11X1_Iter(Object e0, Object e1, Object e2, Obs obs){
    if(obs != null)
        observer.addObs(e0, e1, observer.WILDCARD, obs);

    return map_11X1.getIter(e0, e1, e2);
}
PairMap map_1X11 = new PairMap();
public Object find1_1X11(Object e0, Object e1, Object e2, Obs obs) {
    if(obs != null)
        observer.addObs(e0, observer.WILDCARD, e1, obs);

    try {
        return map_1X11.get(e0, e1, e2);
    } catch(PairMap.NotUniqueException _) {
        throw new NotUniqueError(e0, e1, e2, null);
    }
}
public Iterator findN_1X11_Iter(Object e0, Object e1, Object e2, Obs obs){
    if(obs != null)
        observer.addObs(e0, observer.WILDCARD, e1, obs);

    return map_1X11.getIter(e0, e1, e2);
}
PairMap map_X111 = new PairMap();
public Object find1_X111(Object e0, Object e1, Object e2, Obs obs) {
    if(obs != null)
        observer.addObs(observer.WILDCARD, e0, e1, obs);

    try {
        return map_X111.get(e0, e1, e2);
    } catch(PairMap.NotUniqueException _) {
        throw new NotUniqueError(e0, e1, e2, null);
    }
}
public Iterator findN_X111_Iter(Object e0, Object e1, Object e2, Obs obs){
    if(obs != null)
        observer.addObs(observer.WILDCARD, e0, e1, obs);

    return map_X111.getIter(e0, e1, e2);
}
PairMap map_11XA = new PairMap();
public Object find1_11XA(Object e0, Object e1, Obs obs) {
    if(obs != null)
        observer.addObs(e0, e1, observer.WILDCARD, obs);

    try {
        return map_11XA.get(e0, e1, null);
    } catch(PairMap.NotUniqueException _) {
        throw new NotUniqueError(e0, e1, null, null);
    }
}
public Iterator findN_11XA_Iter(Object e0, Object e1, Obs obs){
    if(obs != null)
        observer.addObs(e0, e1, observer.WILDCARD, obs);

    return map_11XA.getIter(e0, e1, null);
}
PairMap map_1X1A = new PairMap();
public Object find1_1X1A(Object e0, Object e1, Obs obs) {
    if(obs != null)
        observer.addObs(e0, observer.WILDCARD, e1, obs);

    try {
        return map_1X1A.get(e0, e1, null);
    } catch(PairMap.NotUniqueException _) {
        throw new NotUniqueError(e0, e1, null, null);
    }
}
public Iterator findN_1X1A_Iter(Object e0, Object e1, Obs obs){
    if(obs != null)
        observer.addObs(e0, observer.WILDCARD, e1, obs);

    return map_1X1A.getIter(e0, e1, null);
}
PairMap map_X11A = new PairMap();
public Object find1_X11A(Object e0, Object e1, Obs obs) {
    if(obs != null)
        observer.addObs(observer.WILDCARD, e0, e1, obs);

    try {
        return map_X11A.get(e0, e1, null);
    } catch(PairMap.NotUniqueException _) {
        throw new NotUniqueError(e0, e1, null, null);
    }
}
public Iterator findN_X11A_Iter(Object e0, Object e1, Obs obs){
    if(obs != null)
        observer.addObs(observer.WILDCARD, e0, e1, obs);

    return map_X11A.getIter(e0, e1, null);
}
PairMap map_11AX = new PairMap();
public Object find1_11AX(Object e0, Object e1, Obs obs) {
    if(obs != null)
        observer.addObs(e0, e1, observer.WILDCARD, obs);

    try {
        return map_11AX.get(e0, e1, null);
    } catch(PairMap.NotUniqueException _) {
        throw new NotUniqueError(e0, e1, null, null);
    }
}
public Iterator findN_11AX_Iter(Object e0, Object e1, Obs obs){
    if(obs != null)
        observer.addObs(e0, e1, observer.WILDCARD, obs);

    return map_11AX.getIter(e0, e1, null);
}
PairMap map_1XAA = new PairMap();
public Object find1_1XAA(Object e0, Obs obs) {
    if(obs != null)
        observer.addObs(e0, observer.WILDCARD, observer.WILDCARD, obs);

    try {
        return map_1XAA.get(e0, null, null);
    } catch(PairMap.NotUniqueException _) {
        throw new NotUniqueError(e0, null, null, null);
    }
}
public Iterator findN_1XAA_Iter(Object e0, Obs obs){
    if(obs != null)
        observer.addObs(e0, observer.WILDCARD, observer.WILDCARD, obs);

    return map_1XAA.getIter(e0, null, null);
}
PairMap map_1XA1 = new PairMap();
public Object find1_1XA1(Object e0, Object e1, Obs obs) {
    if(obs != null)
        observer.addObs(e0, observer.WILDCARD, observer.WILDCARD, obs);

    try {
        return map_1XA1.get(e0, e1, null);
    } catch(PairMap.NotUniqueException _) {
        throw new NotUniqueError(e0, e1, null, null);
    }
}
public Iterator findN_1XA1_Iter(Object e0, Object e1, Obs obs){
    if(obs != null)
        observer.addObs(e0, observer.WILDCARD, observer.WILDCARD, obs);

    return map_1XA1.getIter(e0, e1, null);
}
PairMap map_XAAA = new PairMap();
public Object find1_XAAA(Obs obs) {
    if(obs != null)
        observer.addObs(observer.WILDCARD, observer.WILDCARD, observer.WILDCARD, obs);

    try {
        return map_XAAA.get(null, null, null);
    } catch(PairMap.NotUniqueException _) {
        throw new NotUniqueError(null, null, null, null);
    }
}
public Iterator findN_XAAA_Iter(Obs obs){
    if(obs != null)
        observer.addObs(observer.WILDCARD, observer.WILDCARD, observer.WILDCARD, obs);

    return map_XAAA.getIter(null, null, null);
}
PairMap map_XAA1 = new PairMap();
public Object find1_XAA1(Object e0, Obs obs) {
    if(obs != null)
        observer.addObs(observer.WILDCARD, observer.WILDCARD, observer.WILDCARD, obs);

    try {
        return map_XAA1.get(e0, null, null);
    } catch(PairMap.NotUniqueException _) {
        throw new NotUniqueError(e0, null, null, null);
    }
}
public Iterator findN_XAA1_Iter(Object e0, Obs obs){
    if(obs != null)
        observer.addObs(observer.WILDCARD, observer.WILDCARD, observer.WILDCARD, obs);

    return map_XAA1.getIter(e0, null, null);
}
PairMap map_X1AA = new PairMap();
public Object find1_X1AA(Object e0, Obs obs) {
    if(obs != null)
        observer.addObs(observer.WILDCARD, e0, observer.WILDCARD, obs);

    try {
        return map_X1AA.get(e0, null, null);
    } catch(PairMap.NotUniqueException _) {
        throw new NotUniqueError(e0, null, null, null);
    }
}
public Iterator findN_X1AA_Iter(Object e0, Obs obs){
    if(obs != null)
        observer.addObs(observer.WILDCARD, e0, observer.WILDCARD, obs);

    return map_X1AA.getIter(e0, null, null);
}
PairMap map_X1A1 = new PairMap();
public Object find1_X1A1(Object e0, Object e1, Obs obs) {
    if(obs != null)
        observer.addObs(observer.WILDCARD, e0, observer.WILDCARD, obs);

    try {
        return map_X1A1.get(e0, e1, null);
    } catch(PairMap.NotUniqueException _) {
        throw new NotUniqueError(e0, e1, null, null);
    }
}
public Iterator findN_X1A1_Iter(Object e0, Object e1, Obs obs){
    if(obs != null)
        observer.addObs(observer.WILDCARD, e0, observer.WILDCARD, obs);

    return map_X1A1.getIter(e0, e1, null);
}
public void rm_1111(Object e0, Object e1, Object e2, Object e3) {
    checkNode(e0); checkNode(e1); checkNodeOrLiteral(e2);
    map_111X.rm(e0, e1, e2, e3);
    map_11X1.rm(e0, e1, e3, e2);
    map_1X11.rm(e0, e2, e3, e1);
    map_X111.rm(e1, e2, e3, e0);
    map_11XA.rm(e0, e1, null, e2);
    map_1X1A.rm(e0, e2, null, e1);
    map_X11A.rm(e1, e2, null, e0);
    map_11AX.rm(e0, e1, null, e3);
    map_1XAA.rm(e0, null, null, e1);
    map_1XA1.rm(e0, e3, null, e1);
    map_XAAA.rm(null, null, null, e0);
    map_XAA1.rm(e3, null, null, e0);
    map_X1AA.rm(e1, null, null, e0);
    map_X1A1.rm(e1, e3, null, e0);
    
    observer.triggerObs(-1, e0, e1, e2);
}
public void add(Object e0, Object e1, Object e2, Object e3) {
    checkNode(e0); checkNode(e1); checkNodeOrLiteral(e2);
    map_111X.add(e0, e1, e2, e3);
    map_11X1.add(e0, e1, e3, e2);
    map_1X11.add(e0, e2, e3, e1);
    map_X111.add(e1, e2, e3, e0);
    map_11XA.add(e0, e1, null, e2);
    map_1X1A.add(e0, e2, null, e1);
    map_X11A.add(e1, e2, null, e0);
    map_11AX.add(e0, e1, null, e3);
    map_1XAA.add(e0, null, null, e1);
    map_1XA1.add(e0, e3, null, e1);
    map_XAAA.add(null, null, null, e0);
    map_XAA1.add(e3, null, null, e0);
    map_X1AA.add(e1, null, null, e0);
    map_X1A1.add(e1, e3, null, e0);
    
    observer.triggerObs(1, e0, e1, e2);
}


	public boolean contains(Object e0, Object e1, Object e2, Object e3, Obs o) {
	    if(o != null) observer.addObs(e0, e1, e2, o);
            return map_11X1.contains(e0, e1, e3, e2);
	}

        protected void checkNode(Object node) {
            if(!Nodes.isNode(node))
                throw new IllegalArgumentException("Not a node: "+node);
        }

        protected void checkNodeOrLiteral(Object node) {
            if(!Nodes.isNode(node) && !(node instanceof Literal))
                throw new IllegalArgumentException("Not a node or literal: "+node);
        }
    }
