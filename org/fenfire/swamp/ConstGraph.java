// AUTOGENERATED By makeswamp.py - DO NOT EDIT.

package org.fenfire.swamp;
import java.util.Iterator;
import org.nongnu.navidoc.util.Obs;

/** A non-modifiable RDF graph. The iterators may implement the method
 *  remove, but it should not be used, as it may cause unspecified behavior.
 */
public interface ConstGraph {
    /** Get a ConstGraph whose queries will return the same
     * value as the queries for this graph, but will 
     * set up the Obs for those queries.
     * When the result of any of those queries changes,
     * Obs is called immediately.
     */
    ConstGraph getObservedConstGraph(org.nongnu.navidoc.util.Obs o);

    /** This observed graph will not be used any more, and
     * if desired, may be recycled.
     * This operation is allowed to be a no-op, and
     * if the graph this method is called on is not one that
     * has been returned by getObservedConstGraph, is
     * defined to be so..
     */
    void close();

    /** If this graph is observed (returned from getObservedConstGraph),
     * get the observer.
     */
    Obs getObserver();
    /** If this graph is observed (returned from getObservedConstGraph),
     * get the original.
     */
    ConstGraph getOriginalConstGraph();

    boolean contains(Object e0, Object e1, Object e2);
    boolean contains(Object e0, Object e1, Object e2, Obs o);

    Object find1_X11(Object pred, Object obj);
Iterator findN_X11_Iter(Object pred, Object obj);
Object find1_X11(Object pred, Object obj, Obs obs);
Iterator findN_X11_Iter(Object pred, Object obj, Obs obs);
Object find1_1X1(Object subj, Object obj);
Iterator findN_1X1_Iter(Object subj, Object obj);
Object find1_1X1(Object subj, Object obj, Obs obs);
Iterator findN_1X1_Iter(Object subj, Object obj, Obs obs);
Object find1_11X(Object subj, Object pred);
Iterator findN_11X_Iter(Object subj, Object pred);
Object find1_11X(Object subj, Object pred, Obs obs);
Iterator findN_11X_Iter(Object subj, Object pred, Obs obs);
Object find1_X1A(Object pred);
Iterator findN_X1A_Iter(Object pred);
Object find1_X1A(Object pred, Obs obs);
Iterator findN_X1A_Iter(Object pred, Obs obs);
Object find1_1XA(Object subj);
Iterator findN_1XA_Iter(Object subj);
Object find1_1XA(Object subj, Obs obs);
Iterator findN_1XA_Iter(Object subj, Obs obs);
Object find1_1AX(Object subj);
Iterator findN_1AX_Iter(Object subj);
Object find1_1AX(Object subj, Obs obs);
Iterator findN_1AX_Iter(Object subj, Obs obs);
Object find1_XA1(Object obj);
Iterator findN_XA1_Iter(Object obj);
Object find1_XA1(Object obj, Obs obs);
Iterator findN_XA1_Iter(Object obj, Obs obs);
Object find1_AX1(Object obj);
Iterator findN_AX1_Iter(Object obj);
Object find1_AX1(Object obj, Obs obs);
Iterator findN_AX1_Iter(Object obj, Obs obs);
Object find1_A1X(Object pred);
Iterator findN_A1X_Iter(Object pred);
Object find1_A1X(Object pred, Obs obs);
Iterator findN_A1X_Iter(Object pred, Obs obs);
Object find1_XAA();
Iterator findN_XAA_Iter();
Object find1_XAA(Obs obs);
Iterator findN_XAA_Iter(Obs obs);
Object find1_AXA();
Iterator findN_AXA_Iter();
Object find1_AXA(Obs obs);
Iterator findN_AXA_Iter(Obs obs);
Object find1_AAX();
Iterator findN_AAX_Iter();
Object find1_AAX(Obs obs);
Iterator findN_AAX_Iter(Obs obs);

}
