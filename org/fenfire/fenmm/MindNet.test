# -*-python-*-
# 
# Copyright (c) 2003, Asko Soukka
# This file is part of Fenfire.
# 
# Fenfire is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# Fenfire is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
# 
# You should have received a copy of the GNU General
# Public License along with Fenfire; if not, write to the Free
# Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
# MA  02111-1307  USA
# 


import org.fenfire as ff
from org.fenfire.fenmm import MindNet, MMPlace

def testMindNet():
    """
    Test FenMM's MindNet storage.
    """

    net = MindNet()
    
    a = ff.swamp.Nodes.N()
    b = ff.swamp.Nodes.N()

    plA = MMPlace(1, 1, 1)
    plB = MMPlace(2, 2, 2)
    plC = MMPlace(3, 3, 3)

    net.put(a, plA, 1)
    net.put(b, plB, 2)
    net.put(b, plC, 3)

    assert net.get(a).depth == net.getDepth(a) == 1
    assert net.get(b).object == net.getPlace(b) == plC

def testMindNetLink():
    """
    Test FenMM's MindNet link table.
    """

    net = MindNet()

    a = ff.swamp.Nodes.N()
    b = ff.swamp.Nodes.N()
    c = ff.swamp.Nodes.N()

    assert not net.hasBeenLinked(a, b), 'No nodes should not be added yet into MindNet.'

    net.link(a, b)
    assert net.hasBeenLinked(a, b), 'Nodes a and b should be linked in MindNet.'
    assert net.hasBeenLinked(b, a), 'Nodes a and b should be linked bidirectionally in MindNet.'

    net.link(a, c)
    assert net.hasBeenLinked(a, c), 'Nodes a and c should be linked in MindNet.'
    assert net.hasBeenLinked(c, a), 'Nodes a and c should be linked bidirectionally in MindNet.'
    assert not net.hasBeenLinked(b, c), 'Nodes b and c should not be linked in MindNet.'
    assert not net.hasBeenLinked(c, b), 'Nodes b and c should not be linked in MindNet.'

    assert not net.hasBeenLinked(None, None), 'Null objects cannot be linked in MindNet.'
    assert not net.hasBeenLinked(a, None), 'Null objects cannot be linked in MindNet.'
    assert not net.hasBeenLinked(None, a), 'Null objects cannot be linked in MindNet.'
