/* -*-java-*-
Views.rj
 *
 *    Copyright (c) 2005 by Benja Fallenstein
 *
 *    This file is part of Fenfire.
 *    
 *    Fenfire is free software; you can redistribute it and/or modify it under
 *    the terms of the GNU General Public License as published by
 *    the Free Software Foundation; either version 2 of the License, or
 *    (at your option) any later version.
 *    
 *    Fenfire is distributed in the hope that it will be useful, but WITHOUT
 *    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 *    or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
 *    Public License for more details.
 *    
 *    You should have received a copy of the GNU General
 *    Public License along with Fenfire; if not, write to the Free
 *    Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *    MA  02111-1307  USA
 *
 */
/*
 * Written by Benja Fallenstein
 */
package org.fenfire.view;
import org.fenfire.*;
import org.fenfire.util.*;
import org.nongnu.libvob.fn.*;
import org.nongnu.libvob.lob.*;
import org.fenfire.view.repr.*;
import org.fenfire.swamp.*;
import org.fenfire.vocab.*;
import javolution.realtime.*;
import javolution.util.*;
import javolution.lang.Text;
import java.util.*;

public class Views {

    public static final Object
	PROP_CATEGORY = Nodes.get("http://fenfire.org/2005/04/categories#PropertyCategory"),
	CATEGORY_ITEM = Nodes.get("http://fenfire.org/2005/04/categories#item");

    /**
     *  @param align If < 0, align top or left; if == 0, align center;
     *               if > 0, align bottom or right.
     */
    public static Lob thumbnailBox(Axis axis, Cursor cursor, 
				   SpatialViewSettings svs, int align) {
	Lob viewbox = Lobs.box(axis);

	ViewSettings.View currentView =
	    svs.getViewByNode(cursor.getNode());

	if(align >= 0)
	    viewbox.add(Lobs.glue(axis, 0, 0, SizeRequest.INF));

	for(Iterator i=svs.getViews().iterator();
	    i.hasNext();) {

	    SpatialView view = (SpatialView)i.next();

	    if(view == currentView) continue;

	    boolean ok = false;

	    for(Iterator j=view.getTypes().iterator(); j.hasNext();) {
		ViewSettings.Type type = (ViewSettings.Type)j.next();

		if(type.containsNode(cursor.getNode()))
		    ok = true;
	    }

	    if(!ok) continue;

	    Lob lob = view.getBuoyLob(cursor.getNode(), true);
	    lob = Lobs.noGrow(axis, lob);
		    
	    lob = Lobs.clickController(lob, 1, new @realtime-i Action(Cursor cursor, SpatialViewSettings svs, SpatialView view) {
		public void run() {
		    svs.changeView(cursor, view);
		}
	    });
			
	    viewbox.add(lob);

	    Text name = Text.valueOf(view.getClass().getName());
	    name = name.subtext(name.lastIndexOf(".")+1);
	    viewbox.add(Lobs.hbox(Components.font().text(name)));
	    viewbox.add(Lobs.glue(axis, 10, 10, 10));
	}

	if(align <= 0)
	    viewbox.add(Lobs.glue(axis, 0, 0, SizeRequest.INF));

	return viewbox;
    }


    public static Lob propbox(Graph graph, ReprView reprView, 
			      List allProps, Set noShowProps,
			      Set activeCategories) {
	List categories = Lists.list();
	Map propsByCategory = FastMap.newInstance();
	Map categoryByProp = FastMap.newInstance();
	
	for(Iterator i=graph.findN_X11_Iter(RDF.type, PROP_CATEGORY);
	    i.hasNext();) {

	    Object category = i.next();

	    List props = Lists.list();
	    
	    for(Iterator j=graph.findN_11X_Iter(category, CATEGORY_ITEM);
		j.hasNext();) {
		
		Object prop = j.next();
		
		if(!allProps.contains(prop)) continue;
		if(categoryByProp.containsKey(prop)) continue;
		
		props.add(prop);
	    }
	    
	    if(!props.isEmpty()) {
		Collections.sort(props);
		
		categories.add(category);
		propsByCategory.put(category, props);
		
		for(Iterator ii=props.iterator(); ii.hasNext();)
		    categoryByProp.put(ii.next(), category);
	    }
	}
	
	List noCategoryProps = FastList.newInstance(); 
	noCategoryProps.addAll(allProps);
	noCategoryProps.removeAll(categoryByProp.keySet());
	Collections.sort(noCategoryProps);
	
	Collections.sort(categories);
	
	Lob propbox;
	
	RoleContext.enter("properties listbox");
	try {
	    Tree propertyTree = new @realtime-i Tree(List categories, Map propsByCategory, List noCategoryProps, Map categoryByProp, Set activeCategories) {
		public List getChildren(Object parent) {
		    
		    if(parent == null) {
			return Lists.concat(categories, noCategoryProps);
		    } else {
			if(activeCategories.contains(parent)) {
			    return (List)propsByCategory.get(parent);
			} else {
			    return Lists.list();
			}
		    }
		}
		
		public Object getParent(Object child) {
		    Object cat = categoryByProp.get(child);
		    if(cat != null) return cat;
		    return null;
		}
	    };
	    
	    Transform transform = new @realtime-i Transform(ReprView reprView, List categories, Set noShowProps, Set activeCategories) {
		public Object transform(Object o) {
		    
		    if(categories.contains(o)) {
			Model catShownModel = new @realtime-i Model(Object o, Set activeCategories) {
			    public Object get() {
				if(activeCategories.contains(o)) {
				    return Boolean.TRUE;
				} else {
				    return Boolean.FALSE;
				}
			    }
			    
			    public void set(Object value) {
				if(value == Boolean.TRUE) {
				    activeCategories.add(o);
				} else {
				    activeCategories.remove(o);
				}
			    }
			    
			    public int getInt() {
				throw new UnsupportedOperationException();
			    }
			    public void set(int value) {
				throw new UnsupportedOperationException();
			    }
			};
		    

			Lob lob = reprView.getLob(o);
			Lob hbox = Lobs.hbox();
			
			Lob checkbox = Lobs.vbox();
			checkbox.add(Components.singleCheckBox(catShownModel));
			checkbox.add(Lobs.glue(Axis.Y, 0, 0, SizeRequest.INF));
			
			hbox.add(checkbox);
			hbox.add(Lobs.glue(Axis.X, 5, 5, 5));
			hbox.add(lob);
			return hbox;
		    }
		    
		    Model propShownModel = new @realtime-i Model(Object o, Set noShowProps) {
			public Object get() {
			    if(noShowProps.contains(o)) {
				return Boolean.FALSE;
			    } else {
				return Boolean.TRUE;
			    }
			}
			
			public void set(Object value) {
			    if(value == Boolean.TRUE) {
				noShowProps.remove(o);
			    } else {
				noShowProps.add(o);
			    }
			}
			
			public int getInt() {
			    throw new UnsupportedOperationException();
			}
			public void set(int value) {
			    throw new UnsupportedOperationException();
			}
		    };
		    
		    Lob checkbox = Lobs.vbox();
		    checkbox.add(Components.singleCheckBox(propShownModel));
		    checkbox.add(Lobs.glue(Axis.Y, 0, 0, SizeRequest.INF));
		    
		    LobFont font = Components.font();

		    List lobs = Lists.concat(Lists.list(checkbox, Lobs.glue(Axis.X, 5, 5, 5)),
					     reprView.getLobList(o),
					     font.textLn(" (" + UniqueShortcutController.getShortcut(o) + ")"));

		    return Lobs.linebreaker(lobs);
		}
	    };
	    
	    propbox = Components.treeBox(propertyTree, 
					 Maps.map("transform", transform));
	    
	    propbox = Lobs.ignoreKeyEventsLob(propbox);
	    
	    propbox = RoleContext.lob(propbox);
	} finally {
	    RoleContext.exit();
	}
	
	return propbox;
    }
}
