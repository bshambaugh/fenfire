/* -*-java-*-
DocumentSpatialView.java
 *    
 *    Copyright (c) 2005, Benja Fallenstein and Matti Katila
 *
 *    This file is part of Fenfire.
 *    
 *    Libvob is free software; you can redistribute it and/or modify it under
 *    the terms of the GNU General Public License as published by
 *    the Free Software Foundation; either version 2 of the License, or
 *    (at your option) any later version.
 *    
 *    Libvob is distributed in the hope that it will be useful, but WITHOUT
 *    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 *    or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
 *    Public License for more details.
 *    
 *    You should have received a copy of the GNU General
 *    Public License along with Libvob; if not, write to the Free
 *    Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *    MA  02111-1307  USA
 *    
 *
 */
/*
 * Written by Benja Fallenstein and Matti Katila
 */
package org.fenfire.view;
import org.fenfire.Cursor;
import org.fenfire.swamp.*;
import org.fenfire.vocab.*;
import org.fenfire.spanimages.*;
import org.fenfire.util.RDFUtil;
import org.nongnu.libvob.lob.*;
import org.nongnu.libvob.lob.lobs.*;
import org.nongnu.libvob.lob.lobs.DragController;
import org.nongnu.libvob.*;
import org.nongnu.libvob.util.*;
import org.nongnu.navidoc.util.Obs;
import javolution.realtime.*;
import java.awt.Color;
import java.util.*;

public class DocumentSpatialView implements SpatialView {
    static private void p(String s) { System.out.println("DocumentSpatialView:: "+s); }

    private Graph graph;
    private WindowAnimation winAnim;

    public DocumentSpatialView(Graph graph, 
			     WindowAnimation winAnim) {
	this.graph = graph;
	this.winAnim = winAnim;
    }



    public final ViewSettings.Type TYPE = // XXX should be static
	new ViewSettings.AbstractType() {
	    public boolean containsNode(Object node) {
		return RDFUtil.isNodeType(graph, node, FF.PsPdfDocument) ||
		    graph.findN_X11_Iter(FF.regionOf, node).hasNext() ||
		    graph.findN_11X_Iter(node, FF.regionOf).hasNext();
	    }
	};
    
    public Set getTypes() {
	return Collections.singleton(TYPE);
    }

    protected CanvasCursor getCanvasCursor(Cursor c) {
	Object pos = c.getSpatialCursor();

	if (pos instanceof CanvasCursor) {
	    return (CanvasCursor)pos;
	} else {
	    Object n = c.getNode();
	    return makeCanvasCursor(n);
	}
    }

    protected CanvasCursor makeCanvasCursor(Object n) {
	Object node = graph.find1_11X(n, FF.regionOf);
	if(node != null) {
	    float x = 0;
	    float y = 0;
	    return new CanvasCursor(node, x, y, 1);
	} else {
	    return new CanvasCursor(n, 0, 0, 1);
	}
    }


    private Lob transDragController(Lob delegate, int button, Cursor cursor) {
	DocumentSpatialView view = this;

	CanvasCursor cc = view.getCanvasCursor(cursor);
	
	float _panX = cc.getPanX(), _panY = cc.getPanY();
	return new @realtime DragController(@set Lob delegate, @set int button, Cursor cursor, DocumentSpatialView view, CanvasCursor cc, float _panX, float _panY) {

	    protected Lob wrap(Lob l) {
		return view.transDragController(l, button, cursor);
	    }

	    protected Object getKey() {
		return "trans-drag-controller-cs";
	    }
	    
	    public void drag(VobScene scene, int cs, float x, float y,
			     VobMouseEvent e) {
		//CanvasCursor cc = view.getCanvasCursor(cursor);
		p("pan: "+cc.getPanX()+":"+cc.getPanY()+
		  ", start "+startx+":"+starty+
		  ", xy: "+x+":"+y);
		float panX = _panX+startx-x, //startx-x, 
		    panY = _panY+starty-y; //starty-y;
		cursor.setSpatialCursor(new CanvasCursor(cc.getCanvas(), 
							 panX, panY, 
							 cc.getZoom()));
		Lobs.getWindowAnimation().switchVS();
	    }
	}; 
    }
    private Lob scaleDragController(Lob delegate, int button, Cursor cursor) {
	DocumentSpatialView view = this;

	CanvasCursor cc = view.getCanvasCursor(cursor);
	
	float _zoom = cc.getZoom();
	return new @realtime DragController(@set Lob delegate, @set int button, Cursor cursor, DocumentSpatialView view, CanvasCursor cc, float _zoom) {

	    protected Lob wrap(Lob l) {
		return view.scaleDragController(l, button, cursor);
	    }

	    protected Object getKey() {
		return "scale-drag-controller-cs";
	    }
	    
	    public void drag(VobScene scene, int cs, float x, float y, 
			     VobMouseEvent e) {
		CanvasCursor cc = view.getCanvasCursor(cursor);

		float dy = (y-starty)/250;
		p("dy = "+dy);
		//if (dy < -.3f || dy > .3f) dy = 0;

		float z = _zoom + dy;
		if (z < 0.07) z = 0.07f;

		cursor.setSpatialCursor(new CanvasCursor(cc.getCanvas(), 
							 cc.getPanX(), 
							 cc.getPanY(), 
							 z));
		Lobs.getWindowAnimation().switchVS();
	    }
	}; 
    }


    protected Lob addTransclusions(Lob bg, Cursor cursor, CanvasCursor cc) {
	Tray tray = Tray.newInstance(Lists.list(), false);

	Object focus = (cursor != null) ? cursor.getNode() : null;

	for (Iterator i=graph.findN_X11_Iter(FF.regionOf, cc.getCanvas());
	     i.hasNext();) {
	    Object n = i.next();
	    
	    int p0 = RDFUtil.getInt(graph, n, FF.startPage) - 1;
	    int p1 = RDFUtil.getInt(graph, n, FF.endPage);

	    // assume only one page, for now...
	    Lob page = PagePool.oneFullPage(cc.getCanvas(), p0);

	    SizeRequest r = page.getSizeRequest();
	    float pageW = r.natW, pageH = r.natH;

	    float x0 = RDFUtil.getFloat(graph, n, FF.startX) * pageW;
	    float y0 = RDFUtil.getFloat(graph, n, FF.startY) * pageH;
	    float x1 = RDFUtil.getFloat(graph, n, FF.endX) * pageW;
	    float y1 = RDFUtil.getFloat(graph, n, FF.endY) * pageH;

	    float w = x1-x0, h = y1-y0;

	    float lineWidth = n.equals(focus) ? 3 : 1;
	    Color color = UniqueColors.getColor(n, .1f, .8f);

	    // just assume first page for now...
	    Lob rect = Lobs.rect(color, lineWidth);

	    if(cursor != null) {
		rect = Lobs.clickController(rect, 1, new @realtime-i Action(Cursor cursor, Object n) {
		    public void run() {
			cursor.setNode(n);
		    }
		});
	    }
	    
	    rect = Lobs.request(rect, w, w, w, h, h, h);
	    rect = Lobs.translate(rect, x0, y0);

	    tray.add(rect);
	}

	tray.add(bg);
	return tray;
    }
    

    public Lob getMainviewLob(Cursor cursor) {
	CanvasCursor cc = getCanvasCursor(cursor);

	Lob l;
	l = PagePool.fullDocument(cc.getCanvas(), cc.getPanX());

	l = Lobs.clickController(l, 1, new @realtime-i Action(Cursor cursor, CanvasCursor cc) {
	    public void run() {
		cursor.setNode(cc.getCanvas());
	    }
	});

	l = addTransclusions(l, cursor, cc);

	l = Lobs.translate(l, -cc.getPanX(), -cc.getPanY(), false);

	l = transDragController(l, 1, cursor);

	//l = Lobs.debug(l, "translate");

	l = Lobs.scale(l, cc.getZoom());

	l = scaleDragController(l, 3, cursor);

	l = Lobs.request(l, 0, 0, 0, 0, 0, 0);
	l = Lobs.align(l, .5f, .5f);

	l = SpatialContextLob.newInstance(l, cc.getCanvas());
	l = Lobs.margin(l, 40);

	return l;
    }

    public Lob getBuoyLob(Object node, boolean useFakeFocus) {
	CanvasCursor cc = makeCanvasCursor(node);

	Lob l;
	l = PagePool.fullDocument(cc.getCanvas(), 0);

	SizeRequest r = l.getSizeRequest();

	l = addTransclusions(l, null, cc);
	
	/*
	if(cc.getCanvas() != cc.get
	l = Lobs.translate(l, cc.getPanX(), cc.getPanY());
	*/

	l = Lobs.scale(l, 100 / r.natH);

	l = SpatialContextLob.newInstance(l, node);

	return l;
    }
}
