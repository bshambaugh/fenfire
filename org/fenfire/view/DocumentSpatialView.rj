/* -*-java-*-
DocumentSpatialView.java
 *    
 *    Copyright (c) 2005, Benja Fallenstein and Matti Katila
 *
 *    This file is part of Fenfire.
 *    
 *    Libvob is free software; you can redistribute it and/or modify it under
 *    the terms of the GNU General Public License as published by
 *    the Free Software Foundation; either version 2 of the License, or
 *    (at your option) any later version.
 *    
 *    Libvob is distributed in the hope that it will be useful, but WITHOUT
 *    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 *    or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
 *    Public License for more details.
 *    
 *    You should have received a copy of the GNU General
 *    Public License along with Libvob; if not, write to the Free
 *    Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *    MA  02111-1307  USA
 *    
 *
 */
/*
 * Written by Benja Fallenstein and Matti Katila
 */
package org.fenfire.view;
import org.fenfire.Cursor;
import org.fenfire.swamp.*;
import org.fenfire.vocab.*;
import org.fenfire.spanimages.*;
import org.fenfire.util.RDFUtil;
import org.nongnu.libvob.lob.*;
import org.nongnu.libvob.lob.lobs.*;
import org.nongnu.libvob.lob.lobs.DragController;
import org.nongnu.libvob.*;
import org.nongnu.libvob.util.*;
import org.nongnu.navidoc.util.Obs;
import javolution.realtime.*;
import java.awt.Color;
import java.util.*;

public class DocumentSpatialView implements SpatialView {
    static public boolean dbg = false;
    static private void p(String s) { System.out.println("DocumentSpatialView:: "+s); }

    private Graph graph;
    private WindowAnimation winAnim;

    public DocumentSpatialView(Graph graph, 
			     WindowAnimation winAnim) {
	this.graph = graph;
	this.winAnim = winAnim;
    }



    public final ViewSettings.Type TYPE = // XXX should be static
	new ViewSettings.AbstractType() {
	    public boolean containsNode(Object node) {
		return RDFUtil.isNodeType(graph, node, FF.PsPdfDocument) ||
		    graph.findN_X11_Iter(FF.regionOf, node).hasNext() ||
		    graph.findN_11X_Iter(node, FF.regionOf).hasNext();
	    }
	};
    
    public Set getTypes() {
	return Collections.singleton(TYPE);
    }

    protected CanvasCursor getCanvasCursor(Cursor c) {
	Object pos = c.getSpatialCursor();

	if (pos instanceof CanvasCursor) {
	    return (CanvasCursor)pos;
	} else {
	    Object n = c.getNode();
	    return makeCanvasCursor(n);
	}
    }

    protected CanvasCursor makeCanvasCursor(Object n) {
	Object node = graph.find1_11X(n, FF.regionOf);
	if(node != null) {
	    float x = 0;
	    float y = 0;
	    return new CanvasCursor(node, x, y, 1);
	} else {
	    return new CanvasCursor(n, 0, 0, 1);
	}
    }

    private Lob transDragController(Lob delegate, int button, Cursor cursor) {
	DocumentSpatialView view = this;

	CanvasCursor cc = view.getCanvasCursor(cursor);
	
	float _panX = cc.getPanX(), _panY = cc.getPanY();
	return new @realtime DragController(@set Lob delegate, @set int button, Cursor cursor, DocumentSpatialView view, CanvasCursor cc, float _panX, float _panY) {

	    protected Object getKey() { return super.getKey()+"TRANS"; }
	    protected Lob wrap(Lob l) {
		return view.transDragController(l, button, cursor);
	    }
	    public void drag(VobScene scene, int cs, float x, float y,
			     VobMouseEvent e) {
		if (dbg) p("pan: "+cc.getPanX()+":"+cc.getPanY()+
			   ", start "+startx+":"+starty+
			   ", xy: "+x+":"+y);
		float panX = _panX+startx-x, //startx-x, 
		    panY = _panY+starty-y; //starty-y;
		cursor.setSpatialCursor(new CanvasCursor(cc.getCanvas(), 
							 panX, panY, 
							 cc.getZoom()));
		Lobs.getWindowAnimation().switchVS();
	    }
	}; 
    }
    private Lob scaleDragController(Lob delegate, int button, Cursor cursor) {
	DocumentSpatialView view = this;

	CanvasCursor cc = view.getCanvasCursor(cursor);
	
	float _zoom = cc.getZoom();
	return new @realtime DragController(@set Lob delegate, @set int button, Cursor cursor, DocumentSpatialView view, CanvasCursor cc, float _zoom) {

	    protected Object getKey() { return super.getKey()+"SCALE"; }
	    protected Lob wrap(Lob l) {
		return view.scaleDragController(l, button, cursor);
	    }
	    
	    public void drag(VobScene scene, int cs, float x, float y, 
			     VobMouseEvent e) {
		CanvasCursor cc = view.getCanvasCursor(cursor);

		float dy = (y-starty)/250;
		if (dbg) p("dy = "+dy);
		//if (dy < -.3f || dy > .3f) dy = 0;

		float z = _zoom + dy;
		if (z < 0.07) z = 0.07f;

		cursor.setSpatialCursor(new CanvasCursor(cc.getCanvas(), 
							 cc.getPanX(), 
							 cc.getPanY(), 
							 z));
		Lobs.getWindowAnimation().switchVS();
	    }
	}; 
    }
    float selectX=-1, selectY=-1, selectW=-1, selectH=-1;

    private Lob selection(Lob delegate, Cursor cursor) {
	// put a red rectangle around a selection.
	if (!(selectX < 0 && selectY < 0 && selectW < 0 && selectH < 0)) {
	    Tray tray = Tray.newInstance(Lists.list(), false);

	    // the red rectangle
	    Lob rect = Lobs.rect(java.awt.Color.red, 4);

	    if(cursor != null) {
		DocumentSpatialView v = this;
		CanvasCursor cc = v.getCanvasCursor(cursor);
		Graph g = v.graph;
		rect = Lobs.clickController(
		    rect, 1, new @realtime-i Action(Graph g,
						    DocumentSpatialView v,
						    Cursor cursor) {
			public void run() {
			    Object n = Nodes.N();
			    Lob page = PagePool.oneFullPage(
				v.getCanvasCursor(cursor).getCanvas(), 0 );
		
			    SizeRequest r = page.getSizeRequest();
			    float pageW = r.natW, pageH = r.natH;


			    int pageStart = (int)( v.selectX / pageW + 1);
			    int pageEnd = (int)( (v.selectX+v.selectW)/ pageW + 1);

			    g.add(n, RDF.type, FF.PsPdfRegion);
			    g.add(n, FF.startPage, 
				  new TypedLiteral(""+pageStart, XSD._int));
			    g.add(n, FF.endPage, 
				  new TypedLiteral(""+pageEnd, XSD._int));
			    g.add(n, FF.startX, 
				  new TypedLiteral((v.selectX % pageW)/pageW));
			    g.add(n, FF.endX, 
				  new TypedLiteral(
				      ((v.selectX+v.selectW) % pageW)/pageW));
			    g.add(n, FF.startY, 
				  new TypedLiteral(v.selectY/pageH));
			    g.add(n, FF.endY, 
				  new TypedLiteral(
				      (v.selectY+v.selectH)/pageH));
			    g.add(n, FF.regionOf, v.getCanvasCursor(cursor
				      ).getCanvas());
			    v.selectX=v.selectY=v.selectW=v.selectH=-1;
			    cursor.setNode(n);
			}
		    });
		rect = Lobs.request(rect, selectW, selectW, selectW, 
				    selectH, selectH, selectH);
		rect = Lobs.translate(rect, selectX, selectY);
	    }

	    // help text
	    float fontSize = 18;
	    LobFont f = FilterLobFont.newInstance(
		SimpleLobFont.newInstance("serif", 0, fontSize, 
					  java.awt.Color.red));
	    Lob helpText = 
		Lobs.hbox(
		    f.text("Click into the selection to create a transclusion")
		    );
	    helpText = Lobs.translate(helpText, 
				      selectX, selectY - fontSize);
	    
	    tray.add(rect);
	    tray.add(helpText);
	    tray.add(delegate);
	    delegate = tray;
	}
	return delegate;
    }
    private Lob selectionDrag(Lob delegate, int button, int modifiers, 
			      Cursor cursor) {
	DocumentSpatialView view = this;
	CanvasCursor cc = view.getCanvasCursor(cursor);
	return new @realtime DragController(@set Lob delegate, 
					    @set int button, 
					    @set int modifiers,
					    Cursor cursor, 
					    DocumentSpatialView view, 
					    CanvasCursor cc) {

	    protected Object getKey() { return super.getKey()+"SELECT"; }
	    protected Lob wrap(Lob l) {
		return view.selectionDrag(l, button, modifiers, cursor);
	    }

	    public void drag(VobScene scene, int cs, float x, float y,
			     VobMouseEvent e) {
		if (startx < x) 
		    view.selectX = startx; 
		else  view.selectX = x;
		if (starty < y)
		    view.selectY = starty; 
		else view.selectY = y;
		view.selectW = (float) Math.abs(x-startx); 
		view.selectH = (float) Math.abs(y-starty);
		if (dbg) p("scale: "+cc.getZoom()+
			   ", pan: "+cc.getPanX()+":"+cc.getPanY()+
			   ", start "+startx+":"+starty+
			   ", xy: "+x+":"+y);
		Lobs.getWindowAnimation().switchVS();
	    }
	};
    }


    protected Lob addTransclusions(Lob bg, Cursor cursor, CanvasCursor cc) {
	Tray tray = Tray.newInstance(Lists.list(), false);

	Object focus = (cursor != null) ? cursor.getNode() : null;

	for (Iterator i=graph.findN_X11_Iter(FF.regionOf, cc.getCanvas());
	     i.hasNext();) {
	    try {
		Object n = i.next();
		
		int p0, p1;
		p0 = RDFUtil.getInt(graph, n, FF.startPage) - 1;
		p1 = RDFUtil.getInt(graph, n, FF.endPage) - 1;
		// assume only one page, for now...
		Lob page = PagePool.oneFullPage(cc.getCanvas(), p0);
		
		SizeRequest r = page.getSizeRequest();
		float pageW = r.natW, pageH = r.natH;
		
		float x0, y0, x1, y1;

		x0 = RDFUtil.getFloat(graph, n, FF.startX) * pageW + p0*pageW;
		y0 = RDFUtil.getFloat(graph, n, FF.startY) * pageH;
		x1 = RDFUtil.getFloat(graph, n, FF.endX) * pageW + p1*pageW;
		y1 = RDFUtil.getFloat(graph, n, FF.endY) * pageH;

		float w = x1-x0, h = y1-y0;
		
		float lineWidth = n.equals(focus) ? 3 : 1;
		Color color = UniqueColors.getColor(n, .1f, .8f);

		// just assume first page for now...
		Lob rect = Lobs.rect(color, lineWidth);
		
		if(cursor != null) {
		    rect = Lobs.clickController(rect, 1, new @realtime-i Action(Cursor cursor, Object n) {
			public void run() {
			    cursor.setNode(n);
			}
		    });
		}
		
		rect = Lobs.request(rect, w, w, w, h, h, h);
		rect = Lobs.translate(rect, x0, y0);
		
		tray.add(rect);
	    } catch (Exception _) { continue; }
	}

	tray.add(bg);
	return tray;
    }
    
    


    public Lob getMainviewLob(Cursor cursor) {
	CanvasCursor cc = getCanvasCursor(cursor);

	Lob l;
	l = PagePool.fullDocument(cc.getCanvas(), cc.getPanX());

	l = Lobs.clickController(l, 1, new @realtime-i Action(Cursor cursor, CanvasCursor cc) {
	    public void run() {
		cursor.setNode(cc.getCanvas());
	    }
	});

	l = selection(l, cursor);
	l = addTransclusions(l, cursor, cc);

	l = selectionDrag(l, 1, VobMouseEvent.SHIFT_MASK, cursor);

	l = Lobs.translate(l, -cc.getPanX(), -cc.getPanY(), false);
	l = transDragController(l, 1, cursor);

	//l = Lobs.debug(l, "translate");

	l = Lobs.scale(l, cc.getZoom());

	l = scaleDragController(l, 3, cursor);

	l = Lobs.request(l, 0, 0, Lob.INF, 0, 0, Lob.INF);
	l = Lobs.align(l, .5f, .5f);

	l = SpatialContextLob.newInstance(l, cc.getCanvas());
	l = Lobs.margin(l, 40);

	return l;
    }

    public Lob getBuoyLob(Object node, boolean useFakeFocus) {
	CanvasCursor cc = makeCanvasCursor(node);

	Lob l;
	l = PagePool.fullDocument(cc.getCanvas(), 0);

	SizeRequest r = l.getSizeRequest();

	l = addTransclusions(l, null, cc);
	
	/*
	if(cc.getCanvas() != cc.get
	l = Lobs.translate(l, cc.getPanX(), cc.getPanY());
	*/

	l = Lobs.scale(l, 100 / r.natH);

	l = SpatialContextLob.newInstance(l, node);

	return l;
    }
}
