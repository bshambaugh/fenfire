/* -*-java-*-
DocumentSpatialView.java
 *    
 *    Copyright (c) 2005, Benja Fallenstein and Matti Katila
 *
 *    This file is part of Fenfire.
 *    
 *    Libvob is free software; you can redistribute it and/or modify it under
 *    the terms of the GNU General Public License as published by
 *    the Free Software Foundation; either version 2 of the License, or
 *    (at your option) any later version.
 *    
 *    Libvob is distributed in the hope that it will be useful, but WITHOUT
 *    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 *    or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
 *    Public License for more details.
 *    
 *    You should have received a copy of the GNU General
 *    Public License along with Libvob; if not, write to the Free
 *    Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *    MA  02111-1307  USA
 *    
 *
 */
/*
 * Written by Benja Fallenstein and Matti Katila
 */
package org.fenfire.view;
import org.fenfire.Cursor;
import org.fenfire.swamp.*;
import org.fenfire.vocab.*;
import org.fenfire.spanimages.*;
import org.fenfire.util.RDFUtil;
import org.nongnu.libvob.lob.*;
import org.nongnu.libvob.lob.lobs.*;
import org.nongnu.libvob.lob.lobs.DragController;
import org.nongnu.libvob.*;
import org.nongnu.libvob.util.*;
import org.nongnu.navidoc.util.Obs;
import javolution.realtime.*;
import java.awt.Color;
import java.util.*;

public class DocumentSpatialView implements SpatialView {
    static private void p(String s) { System.out.println("DocumentSpatialView:: "+s); }

    private Graph graph;
    private WindowAnimation winAnim;

    public DocumentSpatialView(Graph graph, 
			     WindowAnimation winAnim) {
	this.graph = graph;
	this.winAnim = winAnim;
    }



    public final ViewSettings.Type TYPE = // XXX should be static
	new ViewSettings.AbstractType() {
	    public boolean containsNode(Object node) {
		return RDFUtil.isNodeType(graph, node, FF.PsPdfDocument) ||
		    graph.findN_X11_Iter(FF.regionOf, node).hasNext();
	    }
	};
    
    public Set getTypes() {
	return Collections.singleton(TYPE);
    }

    protected CanvasCursor getCanvasCursor(Cursor c) {
	Object pos = c.getSpatialCursor();

	if (pos instanceof CanvasCursor) {
	    return (CanvasCursor)pos;
	} else {
	    Object n = c.getNode();
	    return makeCanvasCursor(n);
	}
    }

    protected CanvasCursor makeCanvasCursor(Object n) {
	Object node = graph.find1_11X(n, FF.regionOf);
	float x = 0;
	float y = 0;
	return new CanvasCursor(node, x, y, 1);
    }


    private Lob transDragController(Lob delegate, int button, Cursor cursor) {
	DocumentSpatialView view = this;

	CanvasCursor cc = view.getCanvasCursor(cursor);
	
	return new @realtime DragController(@set Lob delegate, @set int button, Cursor cursor, DocumentSpatialView view, CanvasCursor cc) {

	    protected Lob wrap(Lob l) {
		return view.transDragController(l, button, cursor);
	    }
	    
	    public void drag(VobScene scene, int cs, float x, float y,
			     VobMouseEvent e) {
		//CanvasCursor cc = view.getCanvasCursor(cursor);
		p("pan: "+cc.getPanX()+":"+cc.getPanY()+
		  ", start "+startx+":"+starty+
		  ", xy: "+x+":"+y);
		float panX = cc.getPanX()+startx-x, 
		    panY = cc.getPanY()+starty-y;
		cursor.setSpatialCursor(new CanvasCursor(cc.getCanvas(), 
							 panX, panY, 
							 cc.getZoom()));
		Lobs.getWindowAnimation().switchVS();
	    }
	}; 
    }
    private Lob scaleDragController(Lob delegate, int button, Cursor cursor) {
	DocumentSpatialView view = this;

	CanvasCursor cc = view.getCanvasCursor(cursor);
	
	return new @realtime DragController(@set Lob delegate, @set int button, Cursor cursor, DocumentSpatialView view, CanvasCursor cc) {

	    protected Lob wrap(Lob l) {
		return view.scaleDragController(l, button, cursor);
	    }
	    
	    public void startDrag(VobScene scene, int cs, float x, float y, 
			     VobMouseEvent e) {
		//starty = e.getY();
	    }
	    public void drag(VobScene scene, int cs, float x, float y, 
			     VobMouseEvent e) {
		CanvasCursor cc = view.getCanvasCursor(cursor);

		p("was: "+cc.getZoom());

		float dy = (starty-e.getY())/100;
		if (dy < -.3f || dy > .3f) dy = 0;
		p(" DY: "+ dy);

		float z = cc.getZoom() * (1 - dy);
		p("z: "+z);
		starty = e.getY();

		if (z < 0.07) z = 0.07f;

		cursor.setSpatialCursor(new CanvasCursor(cc.getCanvas(), 
							 cc.getPanX(), 
							 cc.getPanY(), 
							 z));
		Lobs.getWindowAnimation().switchVS();
	    }
	}; 
    }


    protected Lob getTransclusions(CanvasCursor cc) {
	Tray tray = Tray.newInstance(Lists.list(), false);

	for (Iterator i=graph.findN_X11_Iter(FF.regionOf, cc.getCanvas());
	     i.hasNext();) {
	    Object n = i.next();
	    // do stuff and put red rectangle around..
	}
	
	return tray;
    }
    

    public Lob getMainviewLob(Cursor cursor) {
	Object node = cursor.getNode();
	CanvasCursor cc = getCanvasCursor(cursor);

	Lob l;
	l = PagePool.fullDocument(cc.getCanvas(), cc.getPanX());

	l = Lobs.between(l, getTransclusions(cc), Lobs.nullLob());

	l = Lobs.translate(l, -cc.getPanX(), -cc.getPanY(), false);

	l = transDragController(l, 1, cursor);
	l = scaleDragController(l, 3, cursor);
	//l = Lobs.debug(l, "translate");

	l = Lobs.scale(l, cc.getZoom());

	l = Lobs.request(l, 0, 0, 0, 0, 0, 0);
	l = Lobs.align(l, .5f, .5f);

	l = SpatialContextLob.newInstance(l, cc.getCanvas());
	l = Lobs.margin(l, 40);

	return l;
    }

    public Lob getBuoyLob(Object node, boolean useFakeFocus) {
	CanvasCursor cc = makeCanvasCursor(node);

	Lob l;
	l = PagePool.fullDocument(cc.getCanvas(), -cc.getPanX());
	//l = Lobs.filledRect(java.awt.Color.yellow);
	l = Lobs.translate(l, -cc.getPanX(), -cc.getPanY());
	l = Lobs.align(l, .5f, .5f);
	l = Lobs.request(l, 100, 100, 100, 100, 100, 100);
	l = addBackground(l, cc.getCanvas(), false);

	l = SpatialContextLob.newInstance(l, cc.getCanvas());

	return l;
    }

    protected Lob addBackground(Lob content, Object canvas, boolean fade) {
	Color bgcolor = UniqueColors.getColor(canvas, .75f, 1f);

	Lob l = Lobs.frame(content, bgcolor, Color.black, 2, 0, true);
	return l;
    }
}
