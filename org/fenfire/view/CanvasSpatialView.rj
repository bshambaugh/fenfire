/* -*-java-*-
CanvasSpatialView.java
 *    
 *    Copyright (c) 2005, Benja Fallenstein and Matti Katila
 *
 *    This file is part of Fenfire.
 *    
 *    Libvob is free software; you can redistribute it and/or modify it under
 *    the terms of the GNU General Public License as published by
 *    the Free Software Foundation; either version 2 of the License, or
 *    (at your option) any later version.
 *    
 *    Libvob is distributed in the hope that it will be useful, but WITHOUT
 *    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 *    or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
 *    Public License for more details.
 *    
 *    You should have received a copy of the GNU General
 *    Public License along with Libvob; if not, write to the Free
 *    Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *    MA  02111-1307  USA
 *    
 *
 */
/*
 * Written by Benja Fallenstein and Matti Katila
 */
package org.fenfire.view;
import org.fenfire.Cursor;
import org.fenfire.swamp.*;
import org.fenfire.vocab.*;
import org.fenfire.lob.*;
import org.fenfire.util.RDFUtil;
import org.nongnu.libvob.lob.*;
import org.nongnu.libvob.lob.lobs.DragController;
import org.nongnu.libvob.*;
import org.nongnu.libvob.util.*;
import org.nongnu.navidoc.util.Obs;
import javolution.realtime.*;
import java.awt.Color;
import java.util.*;

public class CanvasSpatialView implements SpatialView {
    static private void p(String s) { System.out.println("CanvasSpatialView:: "+s); }

    private Graph graph;
    private ReprView reprView;
    private WindowAnimation winAnim;

    public CanvasSpatialView(Graph graph, 
			     ReprView reprView,
			     WindowAnimation winAnim) {
	this.graph = graph;
	this.reprView = reprView;
	this.winAnim = winAnim;
    }



    public final ViewSettings.Type TYPE = // XXX should be static
	new ViewSettings.AbstractType() {
	    public boolean containsNode(Object node) {
		return graph.find1_X11(CANVAS2D.contains, node) != null;
	    }
	};
    
    public Set getTypes() {
	return Collections.singleton(TYPE);
    }

    protected CanvasCursor getCanvasCursor(Cursor c) {
	Object pos = c.getSpatialCursor();

	if (pos instanceof CanvasCursor) {
	    return (CanvasCursor)pos;
	} else {
	    Object n = c.getNode();
	    return makeCanvasCursor(n);
	}
    }

    protected CanvasCursor makeCanvasCursor(Object n) {
	Object canvas = graph.find1_X11(CANVAS2D.contains, n);

	float x = RDFUtil.getFloat(graph, n, CANVAS2D.x);
	float y = RDFUtil.getFloat(graph, n, CANVAS2D.x);
	
	Lob l = getContentLob(n);
	SizeRequest r = l.getSizeRequest();

	x += r.natW/2;
	y += r.natH/2;

	return new CanvasCursor(canvas, x, y, 1);
    }


    private Lob transDragController(Lob delegate, int button, Cursor cursor) {
	CanvasSpatialView view = this;

	CanvasCursor cc = view.getCanvasCursor(cursor);
	
	return new @realtime DragController(@set Lob delegate, @set int button, Cursor cursor, CanvasSpatialView view, CanvasCursor cc) {

	    protected Lob wrap(Lob l) {
		return view.transDragController(l, button, cursor);
	    }
	    
	    public void drag(VobScene scene, int cs, float x, float y,
			     VobMouseEvent e) {
		//CanvasCursor cc = view.getCanvasCursor(cursor);
		p("pan: "+cc.getPanX()+":"+cc.getPanY()+
		  ", start "+startx+":"+starty+
		  ", xy: "+x+":"+y);
		float panX = cc.getPanX()+startx-x, 
		    panY = cc.getPanY()+starty-y;
		cursor.setSpatialCursor(new CanvasCursor(cc.getCanvas(), 
							 panX, panY, 
							 cc.getZoom()));
		Lobs.getWindowAnimation().switchVS();
	    }
	}; 
    }
    private Lob scaleDragController(Lob delegate, int button, Cursor cursor) {
	CanvasSpatialView view = this;

	CanvasCursor cc = view.getCanvasCursor(cursor);
	
	return new @realtime DragController(@set Lob delegate, @set int button, Cursor cursor, CanvasSpatialView view, CanvasCursor cc) {

	    protected Lob wrap(Lob l) {
		return view.scaleDragController(l, button, cursor);
	    }
	    
	    public void startDrag(VobScene scene, int cs, float x, float y, 
			     VobMouseEvent e) {
		//starty = e.getY();
	    }
	    public void drag(VobScene scene, int cs, float x, float y, 
			     VobMouseEvent e) {
		CanvasCursor cc = view.getCanvasCursor(cursor);

		p("was: "+cc.getZoom());

		float dy = (starty-e.getY())/100;
		if (dy < -.3f || dy > .3f) dy = 0;
		p(" DY: "+ dy);

		float z = cc.getZoom() * (1 - dy);
		p("z: "+z);
		starty = e.getY();

		if (z < 0.07) z = 0.07f;

		cursor.setSpatialCursor(new CanvasCursor(cc.getCanvas(), 
							 cc.getPanX(), 
							 cc.getPanY(), 
							 z));
		Lobs.getWindowAnimation().switchVS();
	    }
	}; 
    }


    public Lob getMainviewLob(Cursor cursor) {
	Object node = cursor.getNode();
	CanvasCursor cc = getCanvasCursor(cursor);

	Lob l = getCanvasContent(cc.getCanvas(), cursor, 
				 cursor.getNode(), false);

	l = Lobs.translate(l, -cc.getPanX(), -cc.getPanY(), false);

	l = transDragController(l, 1, cursor);
	l = scaleDragController(l, 3, cursor);
	//l = Lobs.debug(l, "translate");

	l = Lobs.scale(l, cc.getZoom());

	l = Lobs.request(l, 0, 0, Lob.INF, 0, 0, Lob.INF);
	l = Lobs.align(l, .5f, .5f);

	/*
	l = new ***realtime-i DragController(l, 3, new org.nongnu.libvob.mouse.RelativeAdapter() {
		public void startDrag(int x, int y) {
		    super.startDrag(x, y);
		    mainviewCache = (Lob)theLob.get();
		}

		public void changedRelative(float dx, float dy) {
		    float nx = panX.getFloat();
		    float ny = panY.getFloat();
		    float nz = zoom.getFloat() + dy/100;

		    zoom.setFloat(nz);

		    pzl.setParams(nx, ny, nz);
		    mainviewCache = (Lob)theLob.get();
		    winAnim.rerender();
		}
	    });
	*/

	/*
	l = new DepthChangeLob(l, -10);
	*/
	l = addBackground(l, cc.getCanvas(), true);
	/*
	l = new DepthChangeLob(l, 10);
	*/

	l = SpatialContextLob.newInstance(l, cc.getCanvas());
	l = Lobs.margin(l, 40);

	return l;
    }

    public Lob getBuoyLob(Object node, boolean useFakeFocus) {
	CanvasCursor cc = makeCanvasCursor(node);

	Lob l = getCanvasContent(cc.getCanvas(), null, 
				 useFakeFocus ? node : null,
				 true);
	l = Lobs.translate(l, -cc.getPanX(), -cc.getPanY());
	l = Lobs.align(l, .5f, .5f);
	l = Lobs.request(l, 100, 100, 100, 100, 100, 100);
	l = addBackground(l, cc.getCanvas(), false);

	l = SpatialContextLob.newInstance(l, cc.getCanvas());

	return l;
    }

    protected Lob getContentLob(Object node) {
	return reprView.getLob(node);
    }


    /**
     *  'cursor' may be null.
     */
    protected Lob getCanvasContent(Object canvas, Cursor cursor,
				   Object focusNode, boolean useFakeFocus) {
	
	Lob tray = Lobs.tray(false);
	
	for(Iterator i=graph.findN_11X_Iter(canvas, CANVAS2D.contains); 
	    i.hasNext();) {
	    
	    Object n = i.next();
	    Lob label = getContentLob(n);

	    if(label.getLayoutableAxis() == Axis.X) {
		SizeRequest r = label.getSizeRequest();

		float size = 100; // hmm, arbitrary value
		if(size < r.minW) 
		    size = r.minW;

		label = label.layoutOneAxis(size); 
	    }

	    boolean isFocus = (!useFakeFocus) && n.equals(focusNode);
	    boolean isFakeFocus = useFakeFocus && n.equals(focusNode);

	    Lob l = BuoyConnectorLob.newInstance(label, n, isFocus, 
						 isFakeFocus);

	    float x = RDFUtil.getFloat(graph, n, CANVAS2D.x);
	    float y = RDFUtil.getFloat(graph, n, CANVAS2D.y);

	    CanvasCursor cc = makeCanvasCursor(n);

	    float zoom;
	    if(cursor != null)
		zoom = getCanvasCursor(cursor).getZoom();
	    else
		zoom = 1; // buoy

	    if(cursor != null) {
		l = Lobs.clickController(l, 1, new @realtime-i Action(Object n, float zoom, Object canvas, Cursor cursor, CanvasCursor cc) {
			public void run() {
			    float nx = cc.getPanX();
			    float ny = cc.getPanY();

			    CanvasCursor c = new CanvasCursor(canvas,
							      nx, ny, zoom);

			    cursor.set(n, c);

			    VobScene sc = Lobs.getWindowAnimation().getCurrentVS();
			    ConnectionVobMatcher m = 
				(ConnectionVobMatcher)sc.matcher;
			    
			    int focus = m.getFocus();
			    int context = m.getLink(focus, -1, canvas, "structure point");
			    m.setNextFocus(m.getLink(context, 1, n, "structure point"));
			}
		    });
            }

	    l = Lobs.translate(l, x, y);
	    tray.add(l);
	}
	
	return Lobs.request(tray, 100, 100, 100, 100, 100, 100);
    }

    protected Lob addBackground(Lob content, Object canvas, boolean fade) {
	Color bgcolor = UniqueColors.getColor(canvas, .75f, 1f);

	Lob l = Lobs.frame(content, bgcolor, Color.black, 2, 0, true);

	/*
	if(fade) l = new AbstractMonoLob(l) { 
		public void render(VobScene scene, int into, int matchingParent,
				   float w, float h, float d,
				   boolean visible) {
		    scene.fader = new ColorFader((Color)bgcolor.get(), 0, 10);
		    super.render(scene, into, matchingParent, w, h, d, visible);
		}
		protected Object clone(Object[] params) {
		    throw new Error("not impl");
		}
	    };
	*/

	return l;
    }
}
