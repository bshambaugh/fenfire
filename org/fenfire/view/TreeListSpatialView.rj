/* -*-java-*-
TreeListSpatialView.java
 *    
 *    Copyright (c) 2005, Matti Katila
 *
 *    This file is part of Fenfire.
 *    
 *    Libvob is free software; you can redistribute it and/or modify it under
 *    the terms of the GNU General Public License as published by
 *    the Free Software Foundation; either version 2 of the License, or
 *    (at your option) any later version.
 *    
 *    Libvob is distributed in the hope that it will be useful, but WITHOUT
 *    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 *    or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
 *    Public License for more details.
 *    
 *    You should have received a copy of the GNU General
 *    Public License along with Libvob; if not, write to the Free
 *    Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *    MA  02111-1307  USA
 *    
 *
 */
/*
 * Written by Matti Katila
 */

package org.fenfire.view;
import org.fenfire.Cursor;
import org.fenfire.swamp.*;
import org.fenfire.vocab.*;
import org.fenfire.structure.*;

import org.fenfire.lob.*;
import org.fenfire.util.RDFUtil;
import org.nongnu.libvob.lob.*;
import org.nongnu.libvob.lob.lobs.DragController;
import org.nongnu.libvob.*;
import org.nongnu.libvob.util.*;
import org.nongnu.navidoc.util.Obs;
import javolution.realtime.*;
import java.awt.Color;
import java.util.*;


/** A spatial view that renders an rdf structure constructed in a form
 * of a tree with simple tree and rdf list vocabularies. This view is
 * constructed to help writing structured text. It's supposed to view
 * the tree as it is on the left side of the view and on the right
 * side show the text word-wrapped; where focused node in tree
 * structure view has reddish rectange or other ways to catch the
 * user's attention.
 *
 * <p>
 *
 * To use Fenfire framework with this view we do the following
 * assumption: 
 *
 * <ul>
 *
 * <li> Textcursor starts from zero and increments by every character
 * in a literal of rdfs:label and/or by nodes that contains no
 * characters, e.g., nodes that represent a transclusion.</li>
 *
 * <li> Current focused cursor node can be changes by keys left and
 * right. If the node has text we are going to move text cursor
 * (hopefully there will be shortcuts to move a word or a sentence)
 * exept if the textcursor is at the begin or at the end of the text
 * and next move goes outside of the literal's text content's
 * size.</li>
 *
 * </ul>
 *
 * </p>
 */
public class TreeListSpatialView implements SpatialView {
    static private void p(String s) { System.out.println("TreeListSpatialView:: "+s); }

    private Graph graph;
    private ReprView reprView;
    private WindowAnimation winAnim;

    public TreeListSpatialView(Graph graph, 
			       ReprView reprView,
			       WindowAnimation winAnim) {
	this.graph = graph;
	this.reprView = reprView;
	this.winAnim = winAnim;
    }

    public final ViewSettings.Type TYPE = 
	new ViewSettings.AbstractType() {
	    public boolean containsNode(Object node) {
		return TreeList.Tree.isRoot(graph, node) ||
		    TreeList.List.isListItem(graph, node);
	    }
	};
    
    public Set getTypes() {
	return Collections.singleton(TYPE);
    }

    protected TreeListCursor getTreeListCursor(Cursor c) {
	Object pos = c.getSpatialCursor();
	if (!(pos instanceof TreeListCursor)) {
	    Object n = c.getNode();
	    c.setSpatialCursor(makeTreeListCursor(n));
	}
	return (TreeListCursor)c.getSpatialCursor();
    }

    protected TreeListCursor makeTreeListCursor(Object n) {
	n = TreeList.getRoot(graph, n);
	return new TreeListCursor(n, 1);
    }

    public Lob getBuoyLob(Object node, boolean useFakeFocus) {
	TreeListCursor cc = makeTreeListCursor(node);

	Lob l;
	l = Components.label("TreeList"+ node);
	l = SpatialContextLob.newInstance(l, cc.getRoot());

	return l;
    }


    public Lob getMainviewLob(Cursor c) {
	TreeListCursor cc = getTreeListCursor(c);

	Lob l;
	Lob vbox = Lobs.vbox();

	for (Iterator i = TreeList.iterator(graph, cc.getRoot()); 
	     i.hasNext();) {
	    Object item = i.next();

	    Literal lit = (Literal) graph.find1_11X(item, RDFS.label);
	    Lob repr = null;
	    if (lit != null) {
		List textList = Components.font().
		    textLn(lit.getString());
		textList = Lobs.keyList(textList, item);
		repr = Lobs.linebreaker(textList);

		if (item == c.getNode()) {
		    Lob cursor_lob = Lobs.line(
			java.awt.Color.black, 0, 0, 0, 1);
		    cursor_lob = Lobs.key(cursor_lob, "textcursor");
		    repr = Lobs.decorate(repr, cursor_lob, item, 
					 c.textCursor - 
					 countTextCursor(cc, graph, item));
		
		}
	    } else 
		repr = reprView.getLob(item);
	    repr = Components.frame(repr);
	    vbox.add(repr);
	}
	l = vbox;

	l = Components.frame(l);
	l = Lobs.request(l, 
			0, 400, Lob.INF, 
			0, 400, Lob.INF);


	l = keys(l, c);
	//l = Lobs.request(l, 0, 0, Lob.INF, 0, 0, Lob.INF);
	l = Lobs.align(l, .5f, .5f);
	l = SpatialContextLob.newInstance(l, cc.getRoot());
	l = Components.frame(l);
	l = Lobs.margin(l, 20);

	return l;
    }



    private int countTextCursor(TreeListCursor tc, Graph g, Object n) {
	int t = 0;
	for (Iterator i = TreeList.iterator(g, tc.getRoot()); 
	     i.hasNext();) {
	    Object item = i.next();
	    if (item == n) break;
	    
	    if (item instanceof Literal) 
		t += ((Literal)item).getString().length();
	    else t++; 
	}
	return t;
    }
    
    private int validateLiteralCursor(Graph g, Object n, int t) {
	Literal l = (Literal) g.find1_11X(n,RDFS.label);
	if (l == null || t < 0) return 0;
	return (t <= l.getString().length() ? t: l.getString().length());
    }
    





    /** A key controller implementing simple text editing.
     */
    public static class KeysController extends AbstractDelegateLob {
	
	private KeysController() {}
	private TreeListSpatialView tree;
	private Cursor cursor;
	public static KeysController newInstance(Lob content, 
						 TreeListSpatialView tree,
						 Cursor cur) {
	    KeysController c = (KeysController)FACTORY.object();
	    c.delegate = content;
	    c.tree = tree;
	    c.cursor = cur;
	    return c;
	}
	
	public Lob wrap(Lob l) {
	    return newInstance(l, tree, cursor);
	}
	
	public boolean key(String key) {
	    WindowAnimation winAnim = Lobs.getWindowAnimation();
	    
	    p("KEY: '"+key+"'");

	    TreeListCursor cc = tree.getTreeListCursor(cursor);

	    // INSERTS alpabets or Enter
	    if (key.length() == 1 || key.equals("Enter")) {
		p("insert: "+key+", textCursor: "+cursor.textCursor);
		if (key.equals("Enter")) key = "\n";

		Object current = cursor.getNode();
		current = TreeList.createNewIfNeeded(tree.graph, 
						     cc.getRoot(),
						     current);
		int tmpTextCursor = cursor.textCursor;
		if (!TreeList.isTreeLeaf(tree.graph, current))
		    current = TreeList.addNewItemBefore(tree.graph, current);
		cursor.setNode(current);
		cursor.textCursorModel.set(tmpTextCursor);
		
		int textCursorMovementsBefore = 
		    tree.countTextCursor(cc, tree.graph, current);
		p("textCursorMovementsBefore: "+textCursorMovementsBefore);

		Literal l = (Literal) tree.graph.find1_11X(current, 
							   RDFS.label);
		if (l == null) l = new PlainLiteral("");
		int literalCursor = 0;
		p(", textCursor: "+cursor.textCursor);
		if (cursor.textCursor >= 0) {
		    p("graah..");
		    literalCursor = cursor.textCursor - 
			textCursorMovementsBefore;
		}
		p("unvalidated: "+literalCursor);
		literalCursor = tree.validateLiteralCursor(
		    tree.graph, current, literalCursor);
		p("validated: "+literalCursor);
		String str = l.getString();
		String done = 
		    str.substring(0, literalCursor) + 
		    key + 
		    (str.length() <= literalCursor ? 
		     "" :  str.substring(literalCursor));
		tree.graph.set1_11X(current,
			       RDFS.label, new PlainLiteral(done));
		cursor.textCursorModel.set(textCursorMovementsBefore+
					   literalCursor+1);
		org.nongnu.libvob.lob.Lobs.getWindowAnimation().animate();
		
		return true;
	    } 
	    // MOVEMENTS 
	    else if (key.indexOf("Left") >= 0 || key.indexOf("Right") >= 0) {
		p("Move: "+key);
		if (key.equals("Left") && cursor.textCursor > 0) {
		    cursor.textCursorModel.set(cursor.textCursor - 1);
		} else if (key.equals("Right")) {
		    cursor.textCursorModel.set(cursor.textCursor + 1);
		}
		return true;
	    }
	    // DELETE
	    else if (key.indexOf("Delete") >= 0 || key.indexOf("Backspace") >= 0) {
		p("Delete: "+key);
		if (cursor.textCursor <= 0) return false;

		Object current = cursor.getNode();
		

		return true;
	    }
	    // MARK place
	    else if (key.equals("Ctrl- ")) {
		p("Mark text cursor");
		cc.textMark = cursor.textCursor;
		return true;
	    }
	    else {
		return delegate.key(key);
	    }
	}


	
	public List getFocusableLobs() {
	    return Lists.list(this);
	}
	
	private static final Factory FACTORY = new Factory() {
		public Object create() {
		    return new KeysController();
		}
	    };
    }

    private Lob keys(Lob l, Cursor c) {
	l = KeysController.newInstance(l, this, c);
	return l;
    }

}
