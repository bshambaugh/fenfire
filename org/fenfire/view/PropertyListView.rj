/* -*-java-*-
PropertyListView.java
 *
 *    Copyright (c) 2005 by Benja Fallenstein
 *
 *    This file is part of Fenfire.
 *    
 *    Fenfire is free software; you can redistribute it and/or modify it under
 *    the terms of the GNU General Public License as published by
 *    the Free Software Foundation; either version 2 of the License, or
 *    (at your option) any later version.
 *    
 *    Fenfire is distributed in the hope that it will be useful, but WITHOUT
 *    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 *    or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
 *    Public License for more details.
 *    
 *    You should have received a copy of the GNU General
 *    Public License along with Fenfire; if not, write to the Free
 *    Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *    MA  02111-1307  USA
 *
 */
/*
 * Written by Benja Fallenstein
 */
package org.fenfire.view;
import org.fenfire.Cursor;
import org.fenfire.swamp.*;
import org.fenfire.vocab.RDF;
import org.fenfire.vocab.RDFS;
import org.fenfire.vocab.RSS;
import org.nongnu.libvob.VobScene;
import org.nongnu.libvob.fn.*;
import org.nongnu.libvob.lob.*;
import org.nongnu.libvob.lob.lobs.*;
import javolution.realtime.*;
import javolution.util.*;
import java.awt.Color;
import java.util.*;

/** PropertyListView shows a node as its represenation and a list of
 *  its properties. Each property is shown by a viewlet that claims
 *  to render the property in question.
 *
 *  @see ReprView, PropertyListView.Viewlet
 */
public class PropertyListView implements SpatialView {
    private static final void p(String s) { System.out.println("PropertyListReprView:: "+s); }

    private static final Literal EMPTY_LITERAL = new PlainLiteral("");

    // PropertyListView implementation is at the end of the file, it uses
    // the following Viewlets.

    /** Viewlet is a small view that renders a property of a node.
     *  SimpleViewlet is the general and normal implementation, which
     *  other viewlets should match in look and feel.
     */
    public interface Viewlet {
	/** Decides whether the viewlet should be considered to render the 
	 *  given property. Should return true if the viewlet can render all 
	 *  information of the property adequately. 
	 */
	boolean canRender(Graph graph, Object prop, Object node);
	/** Renders the given property as a lob. The lob should be
	 *  wide and not tall, and contain a KeyLob for focus indicator.
	 */
	Lob getLob(Graph graph, ReprView reprView, Cursor cursor, 
		   Object prop, Object node);
	/** Handles any interesting key events the view sends to the currently 
	 *  selected viewlet.
	 *  @return true if the event was handled, false otherwise
	 *  @see Lob.key
	 */
	boolean key(Graph graph, Cursor cursor, ReprView reprView, 
		    Object prop, Object node, String key);
    }

    /** Simple viewlet shows any property using the representation view. This
     *  is the general and normal viewlet implementation. */
    public static class SimpleViewlet implements Viewlet {
	public boolean canRender(Graph graph, Object prop, Object node) {
	    return 
		graph.findN_X11_Iter(prop, node).hasNext() ||
		graph.findN_11X_Iter(node, prop).hasNext();
	}

	public boolean key(Graph graph, Cursor cursor, ReprView reprView, 
			   Object prop, Object node, String key) {
	    return getLob(graph, reprView, cursor, prop, node).key(key);
	}

	private Lob valueLob(Graph graph, Cursor cursor, ReprView reprView, Object prop, Object value, int dir) {
	    Lob l = Views.getLob(reprView, value);
	    l = Lobs.clickController(l, 1, new @realtime-i Action(Cursor cursor, Object value) {
		public void run() {
		    cursor.set(value);
		    
		    VobScene sc = ClickController.getClickScene();
		    int cs = ClickController.getClickCS();
		    
		    ConnectionVobMatcher m = (ConnectionVobMatcher)sc.matcher;
		    m.setNextFocus(cs);
		}
	    });
	    l = ConnectorLob.newInstance(l, prop, value, dir);
	    l = Lobs.noGrow(Axis.Y, l);
	    int connections = 0;
	    Iterator i;
	    // XXX don't take noShowProps into account
	    i = graph.findN_1AX_Iter(value);
	    while (i.hasNext()) {
		i.next();
		connections++;
	    }
	    i = graph.findN_XA1_Iter(value);
	    while (i.hasNext()) {
		i.next();
		connections++;
	    }
	    int v = Math.min(255, Math.max(0, (connections - 1)*10));
	    l = Lobs.between(Lobs.filledRect(new java.awt.Color(255, 255-v, 
								255)), 
			     l, null);

	    return Components.frame(l, Maps.map("clip", Boolean.FALSE));
	}
	
	public Lob getLob(Graph graph, ReprView reprView, Cursor cursor,
			  Object prop, Object node) {

	    LobFont font = Components.font();

	    boolean 
		hasLeftValues = graph.findN_X11_Iter(prop, node).hasNext(),
		hasRightValues = graph.findN_11X_Iter(node, prop).hasNext();

	    Lob leftLabel = Lobs.hbox(Lists.concat(font.text("Inverse "),
						   Views.getLobList(reprView, 
								    prop),
						   font.textLn(":")));
	    Lob rightLabel = Lobs.hbox(Lists.concat(Views.getLobList(reprView, 
								     prop),
						    font.textLn(":")));

	    Lob vbox = Lobs.vbox();
	    vbox.add(leftLabel); vbox.add(Lobs.vglue());
	    leftLabel = vbox;

	    vbox = Lobs.vbox();
	    vbox.add(rightLabel); vbox.add(Lobs.vglue());
	    rightLabel = vbox;


	    vbox = Lobs.vbox();

	    Iterator 
		iter_left  = graph.findN_X11_Iter(prop, node),
		iter_right = graph.findN_11X_Iter(node, prop);

	    boolean isFirst = true;

	    while(iter_left.hasNext() || iter_right.hasNext()) {

		if(!isFirst)
		    vbox.add(Lobs.glue(Axis.Y, 2, 2, 2));

		Lob hbox = Lobs.hbox();

		Lob left, right;
		Lob llabel, rlabel;
		Object lvalue, rvalue;
		
		if(iter_left.hasNext()) {
		    lvalue = iter_left.next();

		    left = valueLob(graph, cursor, reprView, prop, lvalue, -1);
		    llabel = isFirst ? leftLabel : Lobs.nullLob();

		    Lob box = Lobs.vbox();
		    box.add(left);
		    box.add(Lobs.vglue());
		    left = box;
		} else {
		    left = llabel = Lobs.nullLob();
		    lvalue = null;
		}
		
		if(iter_right.hasNext()) {
		    rvalue = iter_right.next();

		    right = valueLob(graph, cursor, reprView, prop, rvalue, 1);
		    rlabel = isFirst ? rightLabel : Lobs.nullLob();

		    Lob box = Lobs.vbox();
		    box.add(right);
		    box.add(Lobs.vglue());
		    right = box;
		} else {
		    right = rlabel = Lobs.nullLob();
		    rvalue = null;
		}

		hbox.add(Lobs.request(Axis.X, llabel, 0, 0, 2*Lob.INF/3));
		hbox.add(Lobs.request(Axis.X, left, 0, 0, Lob.INF));
		hbox.add(Lobs.glue(Axis.X, 15, 15, 15));
		hbox.add(Lobs.request(Axis.X, rlabel, 0, 0, 2*Lob.INF/3));
		hbox.add(Lobs.request(Axis.X, right, 0, 0, Lob.INF));

		Lob lob = hbox;

		if(lvalue != null) {
		    Object key = newKey(prop, lvalue, -1);
		    Lob keylob = Lobs.key(Lobs.nullLob(), key);
		    lob = Lobs.between(keylob, lob, null);
		}

		if(rvalue != null) {
		    Object key = newKey(prop, rvalue, 1);
		    Lob keylob = Lobs.key(Lobs.nullLob(), key);
		    lob = Lobs.between(keylob, lob, null);
		}

		lob = Lobs.clickController(lob, 1, new @realtime-i Action(Cursor cursor, Object node, Object lvalue, Object rvalue, Object prop) {
		    public void run() {
			if(rvalue != null) {
			    cursor.setRotation(node, prop, rvalue);
			} else if(lvalue != null) {
			    cursor.setRotation(lvalue, prop, node);
			}
		    }
		});

		vbox.add(lob);

		isFirst = false;
	    }

	    Lob lob = Lobs.noGrow(Axis.Y, vbox);
	    lob = Lobs.ignoreKeyEventsLob(lob);

	    Map keys = FastMap.newInstance();
	    keys.put("Left", new @realtime-i Action(Graph graph, Cursor cursor) {
		public void run() {
		    PropertyListView.move(graph, cursor, -1);
		}
	    });
	    keys.put("Right", new @realtime-i Action(Graph graph, Cursor cursor) {
		public void run() {
		    PropertyListView.move(graph, cursor, 1);
		}
	    });
	    keys.put("Ctrl-Left", new @realtime-i Action(Graph graph, Cursor cursor) {
		public void run() {
		    Object prop = cursor.getRotation().getRotationProperty();
		    Object node = 
			PropertyListView.getConnection(graph, cursor, -1);

		    if(node == null) return;

		    graph.rm_111(node, prop, cursor.getNode());
		}
	    });
	    keys.put("Ctrl-Right", new @realtime-i Action(Graph graph, Cursor cursor) {
		public void run() {
		    Object prop = cursor.getRotation().getRotationProperty();
		    Object node = 
			PropertyListView.getConnection(graph, cursor, 1);

		    if(node == null) return;

		    graph.rm_111(cursor.getNode(), prop, node);
		}
	    });

	    lob = Lobs.keyController(lob, keys);

	    return lob;
	}
    }

    /** Literal viewlet shows a short, literal-valued property */
    public static class LiteralViewlet implements Viewlet {
	public boolean canRender(Graph graph, Object prop, Object node) {
	    Iterator rev = graph.findN_X11_Iter(prop, node);
	    if (rev.hasNext()) return false; // we can't show reverse props

	    Iterator i = graph.findN_11X_Iter(node, prop);
	    if(!i.hasNext()) return false;

	    while(i.hasNext()) 
		if(!(i.next() instanceof Literal)) 
		    return false;

	    return true;
	}

	public boolean key(Graph graph, Cursor cursor, ReprView reprView, 
			   Object prop, Object node, String key) {
	    Literal value = (Literal)cursor.getRotation().getRotationNode();
	    Lob lob = getRow(graph, cursor, reprView, node, prop, value, false);
	    return lob.key(key);
	}

	Lob getRow(Graph graph, Cursor cursor, ReprView reprView,
		   Object node, Object prop, Literal value,
		   boolean isFirst) {
	    LobFont font = Components.font();
	    
	    Lob label;

	    if(isFirst) {
		List labelLobs = Lists.concat(Views.getLobList(reprView, prop),
					      font.textLn(":"));
		
		label = Lobs.vbox();
		label.add(Lobs.hbox(labelLobs));
		label.add(Lobs.vglue());
	    } else {
		label = Lobs.nullLob();
	    }
	    

	    List literalLobs = Lists.concat(font.text(value.getString()),
					    Lists.list(Lobs.hglue()));

	    literalLobs = Lobs.keyList(literalLobs, value);
	    

	    Lob literalLob = Lobs.linebreaker(literalLobs);

	    Model textCursorModel;
	    if(cursor.getRotation() != null &&
	       value.equals(cursor.getRotation().getRotationNode()))
		textCursorModel = cursor.textCursorModel;
	    else
		textCursorModel = SimpleModel.newInstance(-1);

	    Lob cursor_lob = Lobs.line(java.awt.Color.black, 0, 0, 0, 1);
	    cursor_lob = Lobs.key(cursor_lob, "textcursor");
	    literalLob = Lobs.decorate(literalLob, cursor_lob, value, textCursorModel.getInt());

	    
	    Lob hbox = Lobs.hbox();
	    hbox.add(Lobs.request(Axis.X, label, 0, 0, Lob.INF/4));
	    hbox.add(Components.frame(Lobs.request(Axis.X, 
						   literalLob, 
						   0, 0, Lob.INF)));

	    Lob lob = hbox;

	    lob = TextKeyController.newInstance(lob, new @realtime-i Model(Graph graph, Cursor cursor, Object node, Object prop, Literal value) {
		public Object get() {
		    return value.getString();
		}
		public void set(Object o) {
		    String s = (String)o;

		    Literal lit;
		    if(value instanceof TypedLiteral) {
			lit = new TypedLiteral(s, ((TypedLiteral)value).getType());
		    } else {
			lit = new PlainLiteral(s, ((PlainLiteral)value).getLang());
		    }

		    graph.rm_111(node, prop, value);
		    graph.add(node, prop, lit);

		    cursor.setRotation(node, prop, lit);
		    
		    Lobs.getWindowAnimation().switchVS();
		}
		public int getInt() { 
		    throw new UnsupportedOperationException(); 
		}
		public void set(int value) { 
		    throw new UnsupportedOperationException(); 
		}
	    }, textCursorModel);

	    Map keys = FastMap.newInstance();
	    keys.put("Ctrl-Right", new @realtime-i Action(Graph graph, Cursor cursor) {
		public void run() {
		    Object prop = cursor.getRotation().getRotationProperty();
		    Object node = 
			PropertyListView.getConnection(graph, cursor, 1);

		    if(node == null) return;

		    graph.rm_111(cursor.getNode(), prop, node);
		}
	    });
	    lob = Lobs.keyController(lob, keys);

	    lob = ConnectorLob.newInstance(lob, prop, value, 1);
	    
	    Object key = newKey(prop, value, 1);
	    Lob keylob = Lobs.key(Lobs.nullLob(), key);
	    lob = Lobs.between(keylob, lob, null);
	    
	    lob = Lobs.clickController(lob, 1, new @realtime-i Action(Cursor cursor, Object node, Object prop, Object value) {
		public void run() {
		    cursor.setRotation(node, prop, value);
		}
	    });

	    return lob;
	}

	public Lob getLob(Graph graph, ReprView reprView, Cursor cursor,
			  Object prop, Object node) {

	    Lob vbox = Lobs.vbox();

	    boolean isFirst = true;
	    for(Iterator i = graph.findN_11X_Iter(node, prop); i.hasNext();) {
		Literal value = (Literal)i.next();

		vbox.add(getRow(graph, cursor, reprView, node, prop, value,
				isFirst));
		vbox.add(Lobs.glue(Axis.Y, 2, 2, 2));

		isFirst = false;
	    }

	    if(isFirst)
		vbox.add(getRow(graph, cursor, reprView, node, prop, 
				EMPTY_LITERAL, true));

	    return vbox;
	}
    }

    /** Body viewlet shows content of a big property such as a message body. */
    public static class BodyViewlet implements Viewlet {
	public boolean canRender(Graph graph, Object prop, Object node) {
	    // XXX more "body" properties?
	    if (prop != RSS.description && prop != RSS.encoded)
		return false;
	    if (graph.findN_X11_Iter(prop, node).hasNext())
		return false; // we won't show reverse properties
	    Iterator i = graph.findN_11X_Iter(node, prop); 
	    if (!i.hasNext())
		return false;
	    Object body = i.next();
	    if (i.hasNext())
		return false; // we won't show more than the body

	    return (body instanceof Literal);
	}

	public boolean key(Graph graph, Cursor cursor, ReprView reprView, Object prop, 
			   Object node, String key) {
	    return false;
	}

	public Lob getLob(Graph graph, ReprView reprView, Cursor cursor,
			  Object prop, Object node) {
	    // Don't show rss:description if there's content:encoded too
	    if (prop == RSS.description &&
		graph.findN_11X_Iter(node, RSS.encoded).hasNext())
		return Lobs.nullLob();

	    Lob vbox = Lobs.vbox();

	    Lob lob = Lobs.hbox(Views.getLobList(reprView, prop));

	    Lob hbox = Lobs.hbox();
	    hbox.add(lob);
	    hbox.add(Lobs.hglue());

	    vbox.add(hbox);

	    hbox = Lobs.hbox();
	    Lob rightValues = Components.frame(Lobs.vbox(), 
					      Maps.map("clip", Boolean.FALSE));
	    hbox.add(Lobs.request(Axis.X, rightValues, 0, 0, Lob.INF));

	    vbox.add(hbox);

	    Literal value = (Literal) graph.find1_11X(node, prop);

	    String body = value.getString();
	    List list = Lists.list(body);
	    Lob l = Lobs.linebreaker(Components.font().textLn(body));
	    rightValues.add(l);

	    rightValues.add(Lobs.vglue());

	    return Lobs.noGrow(Axis.Y, vbox);
	}
    }

    /** Container viewlet shows a list of elements instead of the container.
     */
    public static class ContainerViewlet implements Viewlet {
	private Object reverseProperty(Graph graph, Object prop, 
					 Object node) {
	    // XXX the rest of URI should be integer without leading zeros
	    if (!prop.toString().startsWith(RDF.voc_))
		return null; // we only show containment properties

	    if (graph.findN_11X_Iter(node, prop).hasNext())
		return null; // we won't show forward properties
	    Iterator i = graph.findN_X11_Iter(prop, node); 
	    if (!i.hasNext())
		return null;
	    Object container = i.next();
	    if (i.hasNext())
		return null; // we won't show more than one container

	    Iterator j = graph.findN_AX1_Iter(container);
	    if (!j.hasNext())
		return null;
	    Object reverseProperty = j.next();
	    if (j.hasNext())
		return null; // we won't show more than one container

	    Iterator k = graph.findN_X11_Iter(reverseProperty, container);
	    if (!k.hasNext())
		return null;
	    Object source = k.next();
	    if (k.hasNext())
		return null; // we won't show more than one container
	    
	    // XXX container can have additional properties that we don't show
	    return reverseProperty; // OK
	}

	public boolean canRender(Graph graph, Object prop, Object node) {
	    if (reverseProperty(graph, prop, node) != null)
		return true;

	    if (graph.findN_X11_Iter(prop, node).hasNext())
		return false; // we won't show reverse properties
	    Iterator i = graph.findN_11X_Iter(node, prop); 
	    if (!i.hasNext())
		return false;
	    Object container = i.next();
	    if (i.hasNext())
		return false; // we won't show more than the container

	    // XXX there can be additional properties that we don't show or
	    // container properties after we stop showing
	    return graph.findN_11X_Iter(container, RDF._1).hasNext();
	}

	public boolean key(Graph graph, Cursor cursor, ReprView reprView, Object prop, 
			   Object node, String key) {
	    return getLob(graph, reprView, cursor, prop, node).key(key);
	}

	public Lob getReverseLob(Graph graph, ReprView reprView, Cursor cursor,
				 Object reverseProperty, Object container,
				 Object node, Object prop) {
	    Object source = graph.find1_X11(reverseProperty, container);

	    LobFont font = Components.font();

	    Lob leftLabel = Lobs.hbox(Lists.concat(
	        font.text("One in "),
		Views.getLobList(reprView, reverseProperty),
		font.textLn(" of:")));
	    Lob vbox = Lobs.vbox();
	    vbox.add(leftLabel); vbox.add(Lobs.vglue());
	    leftLabel = vbox;

	    Lob left = Components.frame(Views.getLob(reprView, source));
	    left = Lobs.clickController(left, 1, new @realtime-i Action(Cursor cursor, Object source) {
		public void run() {
		    cursor.set(source);
		    
		    VobScene sc = ClickController.getClickScene();
		    int cs = ClickController.getClickCS();
		    
		    ConnectionVobMatcher m = (ConnectionVobMatcher)sc.matcher;
		    m.setNextFocus(cs);
		}
	    });
	    left = ConnectorLob.newInstance(left, reverseProperty, source, -1);


	    Lob hbox = Lobs.hbox();

	    hbox.add(Lobs.request(Axis.X, leftLabel, 0, 0, 2*Lob.INF/3));
	    hbox.add(Lobs.request(Axis.X, left, 0, 0, Lob.INF));
	    hbox.add(Lobs.glue(Axis.X, 15, 15, 15));
	    hbox.add(Lobs.request(Axis.X, Lobs.nullLob(), 0, 0, 2*Lob.INF/3));
	    hbox.add(Lobs.request(Axis.X, Lobs.nullLob(), 0, 0, Lob.INF));

	    Lob lob = Lobs.noGrow(Axis.Y, hbox);

	    Object key = newKey(prop, container, -1);
	    Lob keylob = Lobs.key(Lobs.nullLob(), key);
	    lob = Lobs.between(keylob, lob, null);
	    
	    lob = Lobs.clickController(lob, 1, new @realtime-i Action(Cursor cursor, Object node, Object prop, Object container) {
		public void run() {
		    cursor.setRotation(container, prop, node);
		}
	    });

	    lob = Lobs.ignoreKeyEventsLob(lob);

	    Map keys = FastMap.newInstance();
	    keys.put("Left", new @realtime-i Action(Graph graph, Cursor cursor) {
		public void run() {
		    PropertyListView.move(graph, cursor, -1);
		}
	    });
	    keys.put("Ctrl-Left", new @realtime-i Action(Graph graph, Cursor cursor) {
		public void run() {
		    Object prop = cursor.getRotation().getRotationProperty();
		    Object node = 
			PropertyListView.getConnection(graph, cursor, -1);

		    if(node == null) return;

		    graph.rm_111(node, prop, cursor.getNode());
		}
	    });

	    lob = Lobs.keyController(lob, keys);

	    return lob;
	}

	public Lob getLob(Graph graph, ReprView reprView, Cursor cursor,
			  Object prop, Object node) {
	    Object reverseProperty = reverseProperty(graph, prop, node);
	    if (reverseProperty != null)
		return getReverseLob(graph, reprView, cursor, reverseProperty, 
				     graph.find1_X11(prop, node), node, prop);

	    LobFont font = Components.font();

	    Lob leftLabel = Lobs.hbox(Lists.concat(Views.getLobList(reprView, 
								    prop),
						   font.textLn(":")));

	    Lob vbox = Lobs.vbox();
	    vbox.add(leftLabel);
	    vbox.add(Lobs.vglue());
	    leftLabel = vbox;

	    Lob rightValues = Lobs.vbox();

	    Object container = graph.find1_11X(node, prop);

	    int itemnum=1;
	    while (true) {
		Object itemprop = Nodes.get(RDF.voc+'_'+itemnum);
		Iterator j=graph.findN_11X_Iter(container, itemprop);
		if (!j.hasNext())
		    break; // end of continuous part of the list
		while (j.hasNext()) {
		    Object item = j.next();
		    Lob l = Views.getLob(reprView, item);
		    l = Lobs.clickController(l, 1, 
			   new @realtime-i Action(Cursor cursor, Object item) {
			public void run() {
			    cursor.set(item);
					
			    VobScene sc = ClickController.getClickScene();
			    int cs = ClickController.getClickCS();
					
			    ConnectionVobMatcher m = 
			        (ConnectionVobMatcher) sc.matcher;
			    m.setNextFocus(cs);
			}
		    });
		    l = BuoyConnectorLob.newInstance(l, item, false, false);
				
		    rightValues.add(l);
				
		}
		itemnum++; // next item property
	    }
	    rightValues.add(Lobs.vglue());

	    Lob hbox = Lobs.hbox();

	    hbox.add(Lobs.request(Axis.X, leftLabel, 0, 0, Lob.INF/4));

	    hbox.add(Components.frame(Lobs.request(Axis.X, rightValues, 
						   0, 0, Lob.INF)));

	    Object key = newKey(prop, container, 1);
	    Lob keylob = Lobs.key(Lobs.nullLob(), key);
	    Lob lob = Lobs.between(keylob, hbox, null);
	    
	    lob = Lobs.clickController(lob, 1, new @realtime-i Action(Cursor cursor, Object node, Object prop, Object container) {
		public void run() {
		    cursor.setRotation(node, prop, container);
		}
	    });

	    lob = Lobs.noGrow(Axis.Y, lob);
	    lob = Lobs.ignoreKeyEventsLob(lob);

	    Map keys = FastMap.newInstance();
	    keys.put("Right", new @realtime-i Action(Graph graph, Cursor cursor) {
		public void run() {
		    PropertyListView.move(graph, cursor, 1);
		}
	    });
	    keys.put("Ctrl-Right", new @realtime-i Action(Graph graph, Cursor cursor) {
		public void run() {
		    Object prop = cursor.getRotation().getRotationProperty();
		    Object node = 
			PropertyListView.getConnection(graph, cursor, 1);

		    if(node == null) return;

		    graph.rm_111(cursor.getNode(), prop, node);
		}
	    });

	    lob = Lobs.keyController(lob, keys);

	    return lob;
	}
    }
    
    Graph graph;
    List properties;
    Set noShowProps;
    List viewlets;
    ReprView reprView;

    public PropertyListView(Graph graph, List properties, Set noShowProps,
			    List viewlets, ReprView reprView) {
	this.graph = graph;
	this.properties = properties;
	this.noShowProps = noShowProps;
	this.viewlets = viewlets;
	this.reprView = reprView;
    }

    public Set getTypes() {
	return Collections.singleton(ViewSettings.ALL);
    }

    public Lob getMainviewLob(Cursor cursor) {
	Object node = cursor.getNode();

	List lobs = new @realtime RealtimeList(Cursor cursor, Object node,
					       List properties, 
					       Set noShowProps,
					       List viewlets,
					       Graph graph, ReprView reprView){
	    public int size() {
		return properties.size();
	    }

	    public Object get(int i) {
		Object prop = properties.get(i);
		if(noShowProps.contains(prop)) 
		return Lobs.glue(Axis.Y, 0, 0, 0);
		
		for(int iter = 0; iter < viewlets.size(); iter++) {
		    Viewlet v = (Viewlet)viewlets.get(iter);
		    if(v.canRender(graph, prop, node)) {
			Lob l = v.getLob(graph, reprView, cursor, prop, node);

			Lob vbox = Lobs.vbox();
			vbox.add(l);
			vbox.add(Lobs.glue(Axis.Y, 5, 5, 5));

			return vbox;
		    }
		}

		// no viewlet can render this, so we don't render it
		return Lobs.glue(Axis.Y, 0, 0, 0);
	    }
	};
	
	List titleLobs = Lists.concat(Lists.list(Lobs.hglue()),
				      Views.getLobList(reprView, node),
				      Lists.list(Lobs.hglue()));

	Lob title = Lobs.scale(Lobs.linebreaker(titleLobs), 1.5f);
	title = BuoyConnectorLob.newInstance(title, node, true, false);

	Lob vbox = Lobs.vbox();
	vbox.add(title);
	vbox.add(Lobs.glue(Axis.Y, 15, 15, 15));
	vbox.add(Lobs.vbox(lobs));
	vbox.add(Lobs.vglue());

	ensureRotation(graph, cursor, properties);

	Key key = null;
	Cursor.Rotation r = cursor.getRotation();
	if(r != null) {
	    key = newKey(r.getRotationProperty(), r.getRotationNode(),
			 r.getRotationDir());
	}

        Lob cursor_lob = Lobs.filledRect(Components.darkColor);
        cursor_lob = Lobs.key(cursor_lob, "cursor");

	Lob lob = vbox;
        lob = Lobs.decorate(lob, cursor_lob, key, -1, 0);
	lob = Lobs.viewport(Axis.Y, lob, key, -1);
	lob = Lobs.request(Axis.Y, lob, 0, 0, -1);

	Lob delegate = lob;
	lob = new @realtime AbstractDelegateLob(@set Lob delegate, Graph graph, Cursor cursor, List viewlets, ReprView reprView) {
	    public boolean key(String key) {
		Cursor.Rotation r = cursor.getRotation();
		if(r == null) return false;
		Object prop = r.getRotationProperty();
		Object node = cursor.getNode();

		for(int i=0; i < viewlets.size(); i++) {
		    Viewlet v = (Viewlet)viewlets.get(i);
		    if(v.canRender(graph, prop, node)) {
			return v.key(graph, cursor, reprView, prop, node, key);
		    }
		}

		return false;
	    }
	};

	FastMap keys = FastMap.newInstance();
	PropertyListView view = this;
	keys.put("Up", new @realtime-i Action(Cursor cursor, PropertyListView view) {
	    public void run() {
		view.scroll(cursor, -1);
	    }
	});
	keys.put("Down", new @realtime-i Action(Cursor cursor, PropertyListView view) {
	    public void run() {
		view.scroll(cursor, 1);
	    }
	});

	lob = Lobs.keyController(lob, keys);

	return Components.frame(SpatialContextLob.newInstance(lob, node));
    }

    public Lob getBuoyLob(Object node, boolean useFakeFocus) {
	Lob l = Components.frame(Views.getLob(reprView, node));
	l = BuoyConnectorLob.newInstance(l, node, !useFakeFocus, useFakeFocus);
	l = SpatialContextLob.newInstance(l, node);
	return l;
    }

    static Object getConnection(Graph graph, Cursor cursor, int dir) {
	Cursor.Rotation r = cursor.getRotation();
	Object oldNode = cursor.getNode();
	Object prop = r.getRotationProperty();

	List conns = getConnectionList(graph, oldNode, prop, r.getRotationDir());
	int index = indexOf(conns, r.getRotationNode());

	if(index < 0) return null; // XXX

	conns = getConnectionList(graph, oldNode, prop, dir);
	if(index >= conns.size()) return null; // no such connection

	return conns.get(index);
    }

    static void move(Graph graph, Cursor cursor, int dir) {
	Object node = getConnection(graph, cursor, dir);
	Object prop = cursor.getRotation().getRotationProperty();

	if(node == null) return; // no such connection, do nothing
	if(node instanceof Literal) return; // don't move onto literals

	cursor.setRotation(node, prop, cursor.getNode(), -dir);
	cursor.set(node);
    }

    /** If there is no rotation, try to set one.
     */
    static void ensureRotation(Graph graph, Cursor cursor, List properties) {
	Object node = cursor.getNode();
	Cursor.Rotation r = cursor.getRotation();

	if(r == null) {
	    for(Iterator i=properties.iterator(); i.hasNext();) {
		Object prop = i.next();
		
		List conns = getConnectionList(graph, node, prop, 1);

		if(!conns.isEmpty()) {
		    cursor.setRotation(node, prop, conns.get(0));
		    return;
		} else {
		    conns = getConnectionList(graph, node, prop, -1);

		    if(!conns.isEmpty()) {
			cursor.setRotation(conns.get(0), prop, node);
			return;
		    }
		}
	    }
	}
    }

    void scroll(Cursor cursor, int dir) {
	Object node = cursor.getNode();

	ensureRotation(graph, cursor, properties);
	Cursor.Rotation r = cursor.getRotation();

	Object prop = r.getRotationProperty();
	Object value = r.getRotationNode();
	int rdir = r.getRotationDir();

	List conns = getConnectionList(graph, node, prop, rdir);

	int index = indexOf(conns, value);
	if(index < 0) return; // XXX

	index += dir;
	
	if(index >= 0 && index < conns.size()) {
	    cursor.setRotation(node, prop, conns.get(index), rdir);
	    cursor.textCursor = -1;
	    return;
	}

	conns = getConnectionList(graph, node, prop, -rdir);

	if(index >= 0 && index < conns.size()) {
	    cursor.setRotation(node, prop, conns.get(index), -rdir);
	    cursor.textCursor = -1;
	    return;
	}

	int pindex = indexOf(properties, prop);
	if(pindex < 0) {
	    return; // XXX
	}

	List left, right;

	do {
	    pindex += dir;

	    if(pindex < 0)
		return; // we're already at the top, can't go up more

	    if(pindex >= properties.size())
		return; // we're already at the bottom, can't go down more

	    prop = properties.get(pindex);
	
	    if(noShowProps.contains(prop))
		continue;

	    left = getConnectionList(graph, node, prop, -1);
	    right = getConnectionList(graph, node, prop, 1);

	    if(left.size() == 0 && right.size() == 0)
		continue;

	    if(dir > 0) {
		if(right.size() > 0) {
		    cursor.setRotation(node, prop, right.get(0), 1);
		    cursor.textCursor = -1;
		} else if(left.size() > 0) {
		    cursor.setRotation(node, prop, left.get(0), -1);
		    cursor.textCursor = -1;
		} else {
		    continue;
		}
	    } else {
		if(left.size() > right.size()) {
		    cursor.setRotation(node, prop, left.get(left.size()-1), -1);
		    cursor.textCursor = -1;
		} else if(right.size() > 0) {
		    cursor.setRotation(node, prop, right.get(right.size()-1), 1);
		    cursor.textCursor = -1;
		} else {
		    continue;
		}
	    }

	    break;
	} while(true);
    }

    static int indexOf(List l, Object o) {
	// argl, seems like Javolution's indexOf implementation is buggy...

	for(int i=0; i<l.size(); i++)
	    if(l.get(i).equals(o)) return i;

	return -1;
    }

    static List getConnectionList(Graph graph, Object node, 
				  Object prop, int dir) {
	List list = Lists.list();

	Iterator i = (dir > 0) ? graph.findN_11X_Iter(node, prop)
	                       : graph.findN_X11_Iter(prop, node);

	while(i.hasNext()) 
	    list.add(i.next());

	return list;
    }



    private static Key newKey(Object prop, Object value, int dir) {
	Key k = (Key)KEY_FACTORY.object();
	k.prop = prop; k.value = value; k.dir = dir;
	return k;
    }

    private static final RealtimeObject.Factory KEY_FACTORY = 
	new RealtimeObject.Factory() {
	    protected Object create() {
		return new Key();
	    }
	};

    private static class Key extends RealtimeObject {
	Object prop, value;
	int dir;

	public boolean equals(Object other) {
	    if(!(other instanceof Key)) return false;
	    Key o = (Key)other;
	    return prop.equals(o.prop) && value.equals(o.value) && dir==o.dir;
	}

	public int hashCode() {
	    return 2349*prop.hashCode() + 34908*value.hashCode() + dir;
	}
    }
}
