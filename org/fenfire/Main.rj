/* -*-java-*-
Main.java
 *
 *    Copyright (c) 2003-2005 by Benja Fallenstein
 *
 *    This file is part of Fenfire.
 *    
 *    Fenfire is free software; you can redistribute it and/or modify it under
 *    the terms of the GNU General Public License as published by
 *    the Free Software Foundation; either version 2 of the License, or
 *    (at your option) any later version.
 *    
 *    Fenfire is distributed in the hope that it will be useful, but WITHOUT
 *    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 *    or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
 *    Public License for more details.
 *    
 *    You should have received a copy of the GNU General
 *    Public License along with Fenfire; if not, write to the Free
 *    Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *    MA  02111-1307  USA
 *
 */
/*
 * Written by Benja Fallenstein
 */
package org.fenfire;
import org.fenfire.util.*;
import org.nongnu.navidoc.util.Obs;
import org.nongnu.libvob.*;
import org.nongnu.libvob.fn.*;
import org.nongnu.libvob.lob.*;
import org.nongnu.libvob.vobs.*;
import org.nongnu.libvob.impl.NewLobMain;
import org.nongnu.libvob.util.Background;
import org.fenfire.lob.*;
import org.fenfire.vocab.*;
import org.fenfire.gnowsis.*;
import org.fenfire.swamp.*;
import org.fenfire.swamp.impl.*;
import org.fenfire.swamp.smush.*;
import org.fenfire.functional.*;
import org.fenfire.fenfeed.*;
import org.fenfire.fenfeed.http.*;
import org.fenfire.potion.*;
import org.fenfire.view.*;
import org.fenfire.view.repr.*;
import org.fenfire.vocab.FF;
import javolution.realtime.*;
import javolution.util.*;
import java.awt.Color;
import java.io.*;
import java.util.*;

public class Main {
    private static void p(String s) { System.out.println("Main:: "+s); }
    
    public static final Color BG_COLOR = new Color(.1f, .1f, .3f);


    private static final Object[] IMAGE_TYPES = {
	Nodes.get("http://xmlns.com/foaf/0.1/Image"),
    };


    private static final String[] TEXT_PROPS = {
        "http://fenfire.org/rdf-v/2003/05/ff#content",
	"http://purl.oclc.org/NET/fenfire/vocab/showAsContent",
	"http://www.w3.org/2000/01/rdf-schema#label",
	"http://purl.org/dc/elements/1.1/description",
        "http://www.w3.org/1999/02/22-rdf-syntax-ns#value",
	"http://purl.org/dc/elements/1.0/title",
	"http://purl.org/dc/elements/1.1/title",
	"http://purl.org/rss/1.0/title",
	"http://www.w3.org/2001/vcard-rdf/3.0#FN",
	"http://norman.walsh.name/knows/taxonomy#primary",
	"http://xmlns.com/foaf/0.1/name",
	"http://xmlns.com/foaf/0.1/firstName",
	"http://xmlns.com/foaf/0.1/firstname",
	"http://xmlns.com/foaf/0.1/givenName",
	"http://xmlns.com/foaf/0.1/surname",
	"http://example.org/foo#firstName",
    };

    private static final String[] NAMESPACES = {
	"rdf", "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
	"rdfs", "http://www.w3.org/2000/01/rdf-schema#",
	"sl", "http://fenfire.org/rdf-v/2003/05/structlink#",
	"ff", FF._nsId,
	"emir", "http:/xmlns.filsa.net/emir/0.2/#",
	"moz", "http://www.gnowsis.org/ont/mozilla/0.1/",
	"file", "http://www.gnowsis.org/ont/filesys/0.1#",
	"canvas", "http://fenfire.org/rdf-v/2003/05/canvas2d#",
	"dc", "http://purl.org/dc/elements/1.1/",
	"pspdf", "http://fenfire.org/rdf-v/2005/04/ps-pdf-region#",
	"cat", "http://fenfire.org/2005/04/categories#",
	"rss", "http://purl.org/rss/1.0/",
    };

    public static void main(String[] argv) throws IOException {
	final SmushedQuadsGraph quadsGraph = new SmushedQuadsGraph();

	String filename;

	// the first, primary, editable and to be saved graph
	GraphFile gf0 = null; 
	List pipes = new LinkedList();

	Object mainnode = null;
	NamespaceMap nmap = new NamespaceMap();

	if(argv.length == 0) {
	    File f = File.createTempFile("fenfire", ".turtle");
	    argv = new String[] { f.getPath() };

	    InputStream in = 
		Main.class.getClassLoader().getResourceAsStream("demo.turtle");

	    if(in == null)
		throw new Error("resource not found: demo.turtle");

	    OutputStream out = new FileOutputStream(f);
	    
	    org.nongnu.storm.util.CopyUtil.copy(in, out);
	}

	for(int i=0; i<argv.length; i++) {
	    boolean xml = false;
	    if(argv[i].equals("--xml")) {
		xml = true;
		i++;
	    } else if(argv[i].equals("--pipe")) {
		i++;
		File file = new File(argv[i]);
		// we try to accept only readable pipe special files
		if (!file.canRead() || file.isDirectory()) {
		    System.err.println("Can't read "+argv[i]);
		    System.exit(1);
		} else if (file.isFile()) {
		    System.err.println(argv[i]+" is normal file!");
		    System.exit(1);
		}
		pipes.add(file);
		continue;
	    } else if(argv[i].equals("--quit")) {
		System.exit(1);
	    }

	    String gf_uri = gf0==null ? "" : "foo:"+argv[i];
	    Graph gf_graph = new OneQuadGraph(quadsGraph, gf_uri);
	    GraphFile gf;

	    if(argv[i].equals("--pdfdemo")) {
		File file = File.createTempFile("pdfdemo", ".turtle");
		gf_graph = new OneQuadGraph(quadsGraph, "");
		mainnode = Nodes.N();
		// createTempFile really creates the file, so GraphFile.Turtle
		// doesn't use the given default graph
		gf0 = new GraphFile.Turtle(file, gf_graph, null);
		// thus, we addAll ourselves
		gf_graph.addAll(getPDFDemoGraph(mainnode));
		continue;
	    }

	    // we should use canonical file as it has same URI as <> in graph
	    File file = new File(argv[i]).getCanonicalFile();
	    String file_uri = file.toURI().toString();
	    // we try to accept only readable files (or creatable for gf0)
	    if (!file.canRead() || file.isDirectory()) {
		if (gf0!=null) {
		    System.err.println("Can't read additional file "+argv[i]);
		    System.exit(1);
		} else {
		    try {
			if (file.createNewFile()) {
			    System.out.println("Creating new file "+argv[i]);
			    file.delete();
			} else {
			    throw new IOException("Couldn't create: "+argv[i]);
			}
		    } catch (IOException _) {
			System.err.println("Can't read or create "+argv[i]);
			System.exit(1);
		    }
		}
	    } else if (gf0==null && !file.canWrite()) {
		System.out.println("Can't save changes to "+argv[i]);
	    }

	    Graph defaultContent = new HashGraph();
	    if (gf0==null)
		defaultContent.add(Nodes.get(file_uri),
				   FF.startNode,
				   Nodes.N());

	    if(!xml)
		gf = new GraphFile.Turtle(file, gf_graph, defaultContent);
	    else
		gf = new GraphFile.XML(file, gf_graph, defaultContent);

	    nmap.putAll(gf.getNamespaces());

	    if(gf0 == null) {
		gf0 = gf;

		mainnode = findStartNode(gf_graph, Nodes.get(file_uri));
	    }
	}

	loadSysGraph(quadsGraph, nmap);

	File prefsFile = new File("fenfire-conf.turtle");
	Graph prefsGraph = new OneQuadGraph(quadsGraph, "prefs:");
	GraphFile prefs = new GraphFile.Turtle(prefsFile, prefsGraph, 
					       new HashGraph());

	final Graph graph = new AllQuadsGraph(quadsGraph, "");

	FenfireMain m = new FenfireMain(quadsGraph, graph, gf0, prefs,
					mainnode, nmap,
					(File[]) pipes.toArray(new File[0]));
	m.start();
    }

    private static void loadSysGraph(QuadsGraph quadsGraph, 
				     NamespaceMap nmap) throws IOException {
	Graph sys_graph = new OneQuadGraph(quadsGraph, "system:");
	InputStream in = 
	    Main.class.getClassLoader().getResourceAsStream("system.turtle");
	Map map = new TreeMap();
	
	if(in == null)
	    System.out.println("resource not found: system.turtle");
	else {
	    Graphs.readTurtle(in, "system:", sys_graph, map);
	    nmap.putAll(map);
	}
    }

    /** Tries to find a UI start node for a graph.
     *  @param graph the graph the start node should be for
     *  @param document the node that represents the graph file (%lt;&gt;)
     *  @return a node that can be used, or
     *          null, if a good node wasn't found
     */
    private static Object findStartNode(Graph graph, Object document) {
	Iterator iter;

	iter = graph.findN_11X_Iter(document, FF.startNode);
	if (iter.hasNext())
	    return iter.next();

	// Also try a property with wider support
	iter = graph.findN_11X_Iter(document, FOAF.primaryTopic);
	if (iter.hasNext())
	    return iter.next();

	// Perhaps document URI has been lost at some point (RIO writer...)
	iter = graph.findN_A1X_Iter(FF.startNode);
	if (iter.hasNext())
	    return iter.next();

	iter = graph.findN_A1X_Iter(FOAF.primaryTopic);
	if (iter.hasNext())
	    return iter.next();
	
	// Next fallback is the document if there's anything about it
	iter = graph.findN_1AX_Iter(document);
	if (iter.hasNext())
	    return document;
	iter = graph.findN_XA1_Iter(document);
	if (iter.hasNext())
	    return document;

	// Last possibility is any node
	iter = graph.findN_XAA_Iter();
	if(iter.hasNext())
	    return iter.next();

	// No good start node found
	return null;
    }

    public static class FenfireMain extends NewLobMain {

	SmushedQuadsGraph quadsGraph;
	Graph graph, prefsGraph;
	GraphFile graphFile;
	GraphFile prefsGraphFile;
	File[] pipes;
	Object startNode;

	Cursor cursor;
	Set textProps;
	Set noShowProps, activeCategories;
	NamespaceMap nmap;

	List potionsCommandStack = new ArrayList();

	SpatialViewSettings spatialViewSettings;
	ReprViewSettings reprViewSettings;
	ReprView reprView;

	PropertyView propView;

	//List viewlets = new FastList();
	List listViewProperties = new ArrayList();

	Model popupText;
	boolean isQNamePopup;

	public FenfireMain(SmushedQuadsGraph quadsGraph, Graph graph,
			   GraphFile graphFile, GraphFile prefsGraphFile,
			   Object startNode, NamespaceMap nmap, File[] pipes) {
	    super(BG_COLOR);

	    this.nmap = nmap;

	    dontUseFocusLob = true; // argh!
	    
	    this.quadsGraph = quadsGraph;
	    this.graph = graph;
	    this.graphFile = graphFile;
	    this.prefsGraphFile = prefsGraphFile;
	    this.pipes = pipes;

	    this.prefsGraph = new OneQuadGraph(quadsGraph, "prefs:");
	    
	    cursor = new Cursor();
	    quadsGraph.addSmushListener(cursor);
	    
	    if(startNode == null) {
		Iterator i = graph.findN_XAA_Iter();
		if(i.hasNext())
		    startNode = i.next();
		else
		    startNode = Nodes.N();
	    }

	    this.startNode = startNode;

	    cursor.set(startNode);

	    textProps = new HashSet();
	    for(int i=0; i<TEXT_PROPS.length; i++)
		textProps.add(Nodes.get(TEXT_PROPS[i]));

	    for(int i=0; i<NAMESPACES.length; i+=2)
		nmap.put(NAMESPACES[i], NAMESPACES[i+1]);

	    for(int i=0; i<pipes.length; i++)
		readPipeThread(quadsGraph, pipes[i].toURI().toString(), 
			       nmap, windowAnim);

	    // create interface for gnowsis to call
	    try {
		new GnowsisBrowser(quadsGraph, cursor, nmap, windowAnim);
	    } catch(IOException e) {
		e.printStackTrace();
	    }

	    noShowProps = new HashSet();
	    //noShowProps.addAll(textProps); // not useful with PropertyListView, as opposed to StructureView

	    activeCategories = new HashSet();

	    Set reprViews = new HashSet(Arrays.asList(new Object[] {
		new ImageRegionReprView(graph),
		new TextReprView(graph, cursor, nmap, textProps, 
				 RDFS.label),
		new CanvasNodeReprView(graph),
		new PsPdfRegionReprView(graph),
	    }));

	    reprViewSettings = new ReprViewSettings(reprViews);

	    reprView = reprViewSettings;
	    /*
	    reprView = new PropertyListReprView(graph, cursor, viewlets,
						reprViewSettings);
	    */

	    propView = new PropertyView(graph, cursor, nmap, 
					textProps, 
					RDFS.label, .25f, 1f);

	    List listViewViewlets = new ArrayList();
	    listViewViewlets.add(new PropertyListView.ContainerViewlet());
	    //listViewViewlets.add(new PropertyListView.BodyViewlet());
	    listViewViewlets.add(new PropertyListView.LiteralViewlet());
	    listViewViewlets.add(new PropertyListView.SimpleViewlet());

	    Set spatialViews = new HashSet(Arrays.asList(new Object[] {
		new TreeListSpatialView(graph, reprView, windowAnim),
		new DocumentSpatialView(graph, windowAnim),
		new PropertyListView(graph, listViewProperties, noShowProps,
				     listViewViewlets,
				     reprView),
		//new SimpleSpatialView(reprView),
		// these don't work currently:
		//new CalendarSpatialView(graph, reprView, windowAnim, 13),
		new CanvasSpatialView(graph, reprView, windowAnim),
	    }));

	    spatialViewSettings = new SpatialViewSettings(spatialViews);
	}

	/** Returns the major view in the center of the window. Called by
	 *  createLob, which wraps the result in keyboard controllers.
	 */
	protected Lob getMainLob() {
	    return spatialViewSettings.getMainviewLob(cursor);
	}

	/** Returns the top-level lob. NewLobMain calls this, lays out
	 *  the result to fit the window and renders as vobs into a vobscene.
	 */
	protected Lob createLob() { 
	    org.fenfire.spanimages.PagePool.init(graph, 
						windowAnim);
	    org.fenfire.spanimages.PagePool.flush();

	    Set allProps0 = FastSet.newInstance();
	    for(Iterator i=graph.findN_AXA_Iter(); i.hasNext();)
		allProps0.add(i.next());

	    for(Iterator i=graph.findN_X11_Iter(RDF.type, Views.PROP_CATEGORY); i.hasNext();) {

		Object cat = i.next();

		for(Iterator j=graph.findN_11X_Iter(cat, Views.CATEGORY_ITEM); j.hasNext();)
		    allProps0.add(j.next());
	    }

	    List allProps = FastList.newInstance();
	    allProps.addAll(allProps0);
	    Collections.sort(allProps);

	    /*
	    viewlets.clear();
	    for(Iterator i=allProps.iterator(); i.hasNext();) {
		Object prop = i.next();
		
		viewlets.add(PropertyViewlet.newInstance(graph, prop, 
							 reprViewSettings));
	    }
	    */

	    Set properties = FastSet.newInstance();
	    properties.addAll(allProps);
	    properties.removeAll(noShowProps);
	    //new SetModel.Difference(allProps, noShowProps);

	    listViewProperties.clear();
	    listViewProperties.addAll(allProps);

	    Map k = FastMap.newInstance();
	    k.put("Ctrl-J", new @realtime-i Action(Cursor cursor, WindowAnimation windowAnim) { public void run() {
		System.out.println("Please enter URI to jump to:");
		try {
		    Reader r0 = new InputStreamReader(System.in);
		    BufferedReader r = new BufferedReader(r0);
		    String uri = r.readLine();
		    cursor.set(Nodes.get(uri));
		} catch(IOException e) {
		    throw new Error(e);
		}
		windowAnim.switchVS();
		AbstractUpdateManager.chg();
		System.out.println("Done.");
	    }});
	    k.put("Ctrl-G", new @realtime-i Action(Cursor cursor, WindowAnimation windowAnim, Graph graph, QuadsGraph quadsGraph, NamespaceMap nmap) { public void run() {
		final String uri = Nodes.toString(cursor.getNode());
		new Thread() { public void run() {
		    readCBD(quadsGraph, uri, nmap, windowAnim);
		}}.start();

		readWebThread(quadsGraph, uri, nmap, windowAnim);
		for(Iterator i=graph.findN_11X_Iter(cursor.getNode(), RDFS.seeAlso); i.hasNext();) {
		    Object node2 = i.next();
		    if(node2 instanceof Literal) continue;
		    readWebThread(quadsGraph, Nodes.toString(node2), nmap, windowAnim);
		}
	    }});
	    k.put("Ctrl-O", new @realtime-i Action(Cursor cursor, WindowAnimation windowAnim) { public void run() {
		Gnowsis.open(cursor.getNode());
	    }});
	    k.put("Ctrl-S", new @realtime-i Action(GraphFile graphFile, GraphFile prefsGraphFile, NamespaceMap nmap) { public void run() {
		graphFile.save(nmap);
		prefsGraphFile.save(nmap);
		System.out.println("Saved <"+graphFile.getFile().toURI()+">.");
	    }});
	    k.put("Alt-Z", new @realtime-i Action(Cursor cursor, SpatialViewSettings spatialViewSettings, WindowAnimation windowAnim) {
		public void run() {
		    spatialViewSettings.changeView(cursor, 1);
		    windowAnim.animate();
		}
	    });
	    k.put("Alt-X", new @realtime-i Action(Cursor cursor, ReprViewSettings reprViewSettings, WindowAnimation windowAnim) {
		public void run() {
		    reprViewSettings.changeView(cursor, 1);
		    windowAnim.animate();
		}
	    });
	    k.put("Escape", new @realtime-i Action(Cursor cursor, List potionsCommandStack) {
		public void run() {
		    if(!potionsCommandStack.isEmpty())
			potionsCommandStack.remove(0);
		}
	    });


	    //List potionsCommandStack = StateModel.newInstance("potions command");

	    k.put("Alt-N", new PotionAction(Potions.newNode, 
					    graph, cursor, prefsGraph, potionsCommandStack));
	    k.put("Alt-M", new PotionAction(Potions.newLiteral, 
					    graph, cursor, prefsGraph, potionsCommandStack));
	    k.put("Alt-C", new PotionAction(Potions.connect.call(Potions.currentNode, null, null),
					    graph, cursor, prefsGraph, potionsCommandStack));
	    k.put("Alt-B", new PotionAction(Potions.connectBackwards.call(Potions.currentNode, null, null),
					    graph, cursor, prefsGraph, potionsCommandStack));
	    k.put("Alt-T", new PotionAction(Potions.currentNode,
					    graph, cursor, prefsGraph, potionsCommandStack));
	    k.put("Alt-V", new PotionAction(Potions.goTo.call(null),
					    graph, cursor, prefsGraph, potionsCommandStack));
	    k.put("Alt-P", new PotionAction(Potions.node(startNode, 
							 "start node"),
					    graph, cursor, prefsGraph, potionsCommandStack));
	    k.put("Ctrl-R", new PotionAction(Potions.changeURI.call(Potions.currentNode, null),
					     graph, cursor, prefsGraph, potionsCommandStack));
	    k.put("Alt-Shift-B", new PotionAction(Potions.bookmark.call(null),
					     graph, cursor, prefsGraph, potionsCommandStack));

	    FenfireMain ffmain = this;
	    k.put("Alt-Q", new @realtime-i Action(FenfireMain ffmain) {
		public void run() {
		    ffmain.isQNamePopup = true;
		    ffmain.popupText = SimpleModel.newInstance("");
		}
	    });
	    k.put("Alt-Y", new @realtime-i Action(FenfireMain ffmain) {
		public void run() {
		    ffmain.isQNamePopup = false;
		    ffmain.popupText = SimpleModel.newInstance("");
		}
	    });

	    Lob main;
	    try {
		main = getMainLob();
	    } catch (Throwable t) {
		main = Views.handleLobThrowable(t);
	    }
	    main = Lobs.keyController(main, k);
	    main = UniqueShortcutController.newInstance(main, allProps, graph, cursor, prefsGraph, potionsCommandStack);


	    List sortedProps = FastList.newInstance(); 
	    sortedProps.addAll(allProps); //new TreeSet(NeighbourWheel.lexicalComparator, allProps));
	    Lob viewbox;

	    RoleContext.enter("views listbox");
	    try {
		viewbox = Views.thumbnailBox(Axis.Y, cursor, 
					     spatialViewSettings, -1);

		viewbox = Components.frame(viewbox, 
					   Maps.map("clip", Boolean.FALSE));

		viewbox = RoleContext.lob(viewbox);
	    } catch (Throwable t) {
		viewbox = Views.handleLobThrowable(t);
	    } finally {
		RoleContext.exit();
	    }

	    Lob propbox;
	    try {
		propbox = Views.bookmarkBox(graph, reprView, allProps, 
					    noShowProps, activeCategories);
	    } catch (Throwable t) {
		propbox = Views.handleLobThrowable(t);
	    }

	    Lob left = Lobs.vbox();
	    left.add(Lobs.request(Axis.Y, propbox, -1, -1, Lob.INF));
	    left.add(Lobs.noGrow(Axis.Y, getDocLob()));

	    Lob hbox = Lobs.hbox();
	    hbox.add(Lobs.request(Axis.X, left, 200, 200, 200));
	    hbox.add(main);
	    hbox.add(Lobs.request(Axis.X, viewbox, 200, 200, 200));

	    Lob locationBar;

	    RoleContext.enter("location bar");
	    try {
		String uri = cursor.getNode().toString();

		locationBar = Components.label(uri);
		locationBar = Components.frame(locationBar);

		locationBar = RoleContext.lob(locationBar);
	    } catch (Throwable t) {
		locationBar = Views.handleLobThrowable(t);
	    } finally {
		RoleContext.exit();
	    }

	    Lob potionsBar;

	    RoleContext.enter("potions bar");
	    try {
		if(!potionsCommandStack.isEmpty()) {
		    org.fenfire.potion.Expression expr =
			(org.fenfire.potion.Expression)potionsCommandStack.get(0);
		    Map context = Maps.map("reprView", reprView);

		    LobFont font = Components.font();
		    List lobs = expr.getLobs(context, font);
		    lobs = Lists.concat(lobs, font.textLn(""));

		    potionsBar = Lobs.linebreaker(lobs);
		    potionsBar = Components.frame(potionsBar);
		    potionsBar = Lobs.noGrow(Axis.Y, potionsBar);
		} else {
		    potionsBar = Lobs.glue(Axis.Y, 0, 0, 0);
		}

		potionsBar = RoleContext.lob(potionsBar);
	    } catch (Throwable t) {
		potionsBar = Views.handleLobThrowable(t);
	    } finally {
		RoleContext.exit();
	    }

	    Lob vbox = Lobs.vbox();
	    vbox.add(locationBar);
	    vbox.add(Lobs.clip(hbox));
	    vbox.add(potionsBar);
	    
	    Lob lob = ViewThumbnailLinkerLob.newInstance(vbox);
	    lob = DragManager.newInstance(lob);

	    if(popupText != null) {
		Lob popup;

		RoleContext.enter("POPUP");
		try {
		    popup = Lobs.vbox();

		    if(isQNamePopup)
			popup.add(Components.label("Enter qname (use Ctrl-V to paste):"));
		    else
			popup.add(Components.label("Enter URI (use Ctrl-V to paste):"));

		    popup.add(Lobs.glue(Axis.Y, 5, 5, 5));
		    popup.add(Components.textBox(popupText, Maps.map()));
		    popup.add(Lobs.glue(Axis.Y, 5, 5, 5));

		    Action ok = new @realtime-i Action(FenfireMain ffmain, 
			Graph graph, Cursor cursor, Graph prefsGraph,
			List potionsCommandStack) {
			    public void run() {
				String text = (String)ffmain.popupText.get();
				String uri;

				if(ffmain.isQNamePopup) {
				    int i = text.indexOf(':');
				    if(i < 0) return;
				    String prefix = text.substring(0, i);
				    uri = ffmain.nmap.getURIForPrefix(prefix)
					+ text.substring(i+1);
				} else {
				    uri = text;
				}
				
				Object node = Nodes.get(uri);

				new PotionAction(Potions.node(node, uri),
						 graph, cursor, prefsGraph,
						 potionsCommandStack).run();
				
				ffmain.popupText = null;
			    }
			};
		    Action cancel = 
			new @realtime-i Action(FenfireMain ffmain) {
			    public void run() {
				ffmain.popupText = null;
			    }
			};

		    Lob buttons = Lobs.hbox();
		    buttons.add(Components.button(Components.label("Ok"), ok));
		    buttons.add(Components.button(Components.label("Cancel"), 
						  cancel));

		    popup.add(Lobs.align(buttons, .5f, .5f));

		    popup = Components.frame(popup);
		    popup = Lobs.request(Axis.X, popup, 250, -1, -1);
		    popup = Lobs.margin(popup, 20);
		    popup = Lobs.align(popup, .5f, .5f);

		    Map keys = FastMap.newInstance();
		    keys.put("Escape", cancel);
		    keys.put("Enter", ok);

		    popup = Lobs.keyController(popup, keys);

		    popup = RoleContext.lob(popup);
		} catch (Throwable t) {
		    popup = Views.handleLobThrowable(t);
		    // XXX hack, as we couldn't exit the popup
		    popup = lob;
		    ffmain.popupText = null;
		} finally {
		    RoleContext.exit();
		}

		lob = popup;
	    }

	    /*
	    FocusLob fl = new FocusLob(lob);
	    fl.getFocusModel().set(k);
	    */
	    return lob;
	}

	protected VobMatcher makeMatcher() {
	    return new ConnectionVobMatcher();
	}
    }

    private static Graph getPDFDemoGraph(Object mainnode) {
	Graph graph = new HashGraph();

	Object canvas = Nodes.N();
	graph.add(canvas, RDF.type, CANVAS2D.Canvas);

	Object node = Nodes.N();
	graph.add(canvas, CANVAS2D.contains, node);
	graph.add(node, RDFS.label, new PlainLiteral("Foo"));
	graph.add(node, CANVAS2D.x, new PlainLiteral("25"));
	graph.add(node, CANVAS2D.y, new PlainLiteral("25"));

	Object node3 = Nodes.N();
	graph.add(canvas, CANVAS2D.contains, node3);
	graph.add(node3, RDFS.label, new PlainLiteral("Bar"));
	graph.add(node3, CANVAS2D.x, new PlainLiteral("40"));
	graph.add(node3, CANVAS2D.y, new PlainLiteral("60"));

	Object pageSpan = mainnode;
	graph.add(canvas, CANVAS2D.contains, pageSpan);
	graph.add(pageSpan, CANVAS2D.x, new PlainLiteral("-100"));
	graph.add(pageSpan, CANVAS2D.y, new PlainLiteral("300"));
	graph.add(pageSpan, RDF.type, FF.PsPdfRegion);
	graph.add(pageSpan, FF.startPage, new TypedLiteral("1", XSD._int));
	graph.add(pageSpan, FF.endPage, new TypedLiteral("1", XSD._int));
	graph.add(pageSpan, FF.startX, new TypedLiteral("0.1", XSD._float));
	graph.add(pageSpan, FF.endX, new TypedLiteral("0.5", XSD._float));
	graph.add(pageSpan, FF.startY, new TypedLiteral("0.3", XSD._float));
	graph.add(pageSpan, FF.endY, new TypedLiteral("0.6", XSD._float));
	graph.add(pageSpan, FF.regionOf, Nodes.get("java-classpath:testdata/randompaper.pdf")); // the 'java-classpath' URI "scheme" is a stupid hack because I don't have a better idea right now --Benja

	// 23:33 < benja_> [ rdf:type alph:MultiPageSpan; 
	// alph:startPage "3"; alph:endPage "7"; alph:partOf <storm:...> ]

	


	/*
	Object home = Nodes.N(), n1 = Nodes.N(), n2 = Nodes.N();
	Object label =
	    Nodes.get("http://www.w3.org/2000/01/rdf-schema#label");


	graph.add(home, STRUCTLINK.linkedTo, n1);
	graph.add(home, STRUCTLINK.linkedTo, n2);
	graph.add(n1, label, new PlainLiteral("Node 1"));
	graph.add(n2, label, new PlainLiteral("Node 2"));
	*/

	return graph;
    }

    private static class Adder implements Runnable {
	Graph src, dst;
	Map namespaces;
	NamespaceMap nmap;
	WindowAnimation anim;

	public void run() {
	    Main.p("start adding...");
	    if(namespaces != null)
		nmap.putAll(namespaces);

	    dst.startUpdate();
	    dst.rm_AAA();

	    if(dst.find1_XAA() != null) 
		throw new Error("graph not empty");
	    else
		Main.p("The graph is nice, clean and tidy.");

	    dst.addAll(src);
	    dst.endUpdate();
		
	    anim.animate();
	    Main.p("added data to graph.");
	}

	Adder(Graph src, Graph dst, Map namespaces, NamespaceMap nmap,
	      WindowAnimation anim) {
	    this.src = src; this.dst = dst; 
	    this.namespaces = namespaces; this.nmap = nmap;
	    this.anim = anim;
	}
    }

    private static void add(Graph src, Graph dst, Map namespaces,
			    NamespaceMap nmap, WindowAnimation anim) {
	AbstractUpdateManager mgr = AbstractUpdateManager.getInstance();
	if(mgr == null) 
	    throw new IllegalStateException("updatemanager not initialized");
	mgr.addTask(new Adder(src, dst, namespaces, nmap, anim), 0);
    }


    private static void readWebThread(final QuadsGraph quadsGraph, 
				      final String uri,
				      final NamespaceMap nmap,
				      final WindowAnimation windowAnim) {
	if(!uri.startsWith("http://")) return;

	new Thread() { public void run() {
	    readWeb(quadsGraph, uri, nmap, windowAnim);
	}}.start();
    }

    private static void readPipeThread(final QuadsGraph quadsGraph, 
				       final String uri,
				       final NamespaceMap nmap,
				       final WindowAnimation windowAnim) {
	if(!uri.startsWith("file:/")) return;

	new Thread() { public void run() {
	    readPipe(quadsGraph, uri, nmap, windowAnim);
	}}.start();
    }

    private static void readPipe(QuadsGraph quadsGraph, String uri,
				NamespaceMap nmap,
				WindowAnimation winAnim) {
	if(!uri.startsWith("file:/")) return;

	try {
	    int i = 0;
	    while (true) {
		i++;
		BufferedReader pipe = new BufferedReader(new FileReader(new File(new java.net.URI(uri))));

		Graph graph = new HashGraph();
		Map namespaces = new HashMap();		
		try {
		    Graphs.readTurtle(pipe, uri, graph, namespaces);
		} catch(Exception e) {
		    e.printStackTrace();
		}

		Graph _graph = new OneQuadGraph(quadsGraph, uri/*+'/'+i*/);
		add(graph, _graph, namespaces, nmap, winAnim);

		/*		while (true) {
		    String line = pipe.readLine();
		    if (line == null)
			break;
		    System.out.println(line);
		    }*/
	    }
	} catch(Exception e) {
	    e.printStackTrace();
	}
    }

    // we hope that httpContext is properly synchronized,
    // but creating httpContext must be synchronized on httpContext_monitor
    private static Object httpContext_monitor = new Object();
    private static HTTPContext httpContext;
    private static void readWeb(QuadsGraph quadsGraph, String uri,
				NamespaceMap nmap,
				WindowAnimation winAnim) {
	if(!uri.startsWith("http://")) return;

	try {
	    synchronized(httpContext_monitor) {
		if(httpContext == null) {
		    httpContext = new HTTPContext();
		    httpContext.setAccept("application/x-turtle, "+
					  "application/turtle, "+
					  "application/rdf+xml; q=0.9, "+
					  "application/rss+xml; q=0.4, "+
					  "application/xml; q=0.3, "+
					  "text/xml; q=0.2, "+
					  "*/*; q=0.1");
		}
	    }

	    HTTPResource res = new HTTPResource(uri, httpContext);
	    
	    System.out.println("Loading data from Web: "+uri+"...");
	    res.reload(false);

	    System.out.println("Parsing data from Web...");
	    Graph graph = new HashGraph();

	    Map namespaces = new HashMap();
	    FeedReader.read(res, graph, namespaces);
	    System.out.println("Add data from Web to graph...");
	    Graph _graph = new OneQuadGraph(quadsGraph, uri);
	    add(graph, _graph, namespaces, nmap, winAnim);
	    System.out.println("Loaded from the Web.");	
	} catch(IOException e) {
	    if (e.getMessage().startsWith("Unhandled content type "))
		System.out.println(e.getMessage());
	    else
		e.printStackTrace();
	}
    }
    
    private static void readCBD(QuadsGraph quadsGraph, String uri,
				NamespaceMap nmap,
				WindowAnimation winAnim) {
	System.out.println("Loading CBD from Gnowsis...");
	try {
	    Graph cbd = Gnowsis.getCBD(uri);
	    Graph graph = new OneQuadGraph(quadsGraph, uri);
	    add(cbd, graph, null, null, winAnim);
	    System.out.println("Loaded data from Gnowsis.");
	} catch (IOException e) {
	    if (e.getMessage().equals("Connection refused"))
		System.out.println("Couldn't connect Gnowsis.");
	    else
		throw new Error(e);
	} catch (Exception e) {
	    throw new Error(e);
	}
    }


    protected static class GnowsisBrowser 
	extends org.gnowsis.plugins.remotebrowser.RemoteBrowserServer {

	protected QuadsGraph quadsGraph;
	protected Cursor cursor;
	protected NamespaceMap nmap;
	protected WindowAnimation windowAnim;

	public GnowsisBrowser(QuadsGraph quadsGraph, Cursor cursor, 
			      NamespaceMap nmap, WindowAnimation windowAnim) 
	    throws IOException {

	    this.quadsGraph = quadsGraph;
	    this.cursor = cursor;
	    this.nmap = nmap;
	    this.windowAnim = windowAnim;
	}

	public int browse(final String uri) {
	    System.out.println("Gnowsis-browse to: "+uri);

	    cursor.set(Nodes.get(uri));
	    windowAnim.switchVS();

	    new Thread() { public void run() {
		readCBD(quadsGraph, uri, nmap, windowAnim);
	    }}.start();

	    return 0;
	}
    }

    private static String[][] docStrings = {
	{"Cursor keys:", "move"},
	{"Ctrl-Left/Right:", "break connection"},
	null,
	{"Alt-C:", "connect on [prop] to [node]"},
	{"Alt-B:", "connect backwards on [prop] to [node]"},
	null,
	{"Alt-T:", "this node"},
	{"Alt-N:", "a new node"},
	{"Alt-M:", "a new literal"},
	null,
	{"Alt-V:", "go to [node]"},
	{"Alt-Q:", "a node given by qname"},
	{"Alt-Y:", "a node given by URI"},
	{"Alt-P:", "the 'home'/'start' node"},
	null,
	{"Alt-Z:", "change spatial view"},
	{"Alt-X:", "change node view"},
	null,
	{"Ctrl-R:", "change node URI ('rename')"},
	null,
	{"Ctrl-G:", "load data about current node from Gnowsis+Web"},
	{"Ctrl-O:", "open item in Gnowsis"},
	{"Ctrl-S:", "save graph"},
    };

    protected static Lob getDocLob() {
	RoleContext.enter("doc");
	try {
	    Model model = StateModel.newInstance("doc shown", Boolean.TRUE);
	    boolean shown = model.get() == Boolean.TRUE;
	    
	    Lob box = Lobs.vbox();
	    String buttonText;

	    if(shown) {
		Lob vbox = Lobs.vbox();
		
		for(int i=0; i<docStrings.length; i++) {
		    if(docStrings[i] != null) {
			Lob hbox = Lobs.hbox();
			if(docStrings[i][0] != null) {
			    Lob label = Lobs.vbox();
			    label.add(Lobs.noGrow(Axis.X, Components.label(docStrings[i][0])));
			    label.add(Lobs.vglue());

			    hbox.add(label);
			    hbox.add(Lobs.glue(Axis.X, 5, 5, 5));
			}

			List lobs = Components.font().textLn(docStrings[i][1]);
			hbox.add(Lobs.linebreaker(lobs));

			vbox.add(hbox);
		    } else {
			vbox.add(Lobs.glue(Axis.Y, 5, 5, 5));
		    }
		}

		box.add(vbox);
		box.add(Lobs.glue(Axis.Y, 5, 5, 5));
		buttonText = "Hide shortcuts";
	    } else {
		buttonText = "Show shortcuts";
	    }
	    
	    Action action = new @realtime-i Action(Model model) {
		public void run() {
		    if(model.get() == Boolean.TRUE)
		        model.set(Boolean.FALSE);
		    else
		        model.set(Boolean.TRUE);
		}
	    };

	    RoleContext.enter("button");
	    try {
		Lob label = Components.label(buttonText);
		box.add(RoleContext.lob(Components.button(label, action)));
	    } finally {
		RoleContext.exit();
	    }
			
	    Lob bg = Lobs.filledRect(Color.white);
	    Lob lob = Lobs.between(bg, Lobs.margin(box, 5), null);

	    lob.layout(200, 400); // check that this throws no exceptions

	    return RoleContext.lob(lob);
	} finally {
	    RoleContext.exit();
	}
    }
}
